// Code generated by protoc-gen-go. DO NOT EDIT.
// source: collector.proto

package colly_protofiles

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Collector struct {
	ID                     int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UA                     string   `protobuf:"bytes,2,opt,name=UA,proto3" json:"UA,omitempty"`
	MaxDepth               int32    `protobuf:"varint,14,opt,name=MaxDepth,proto3" json:"MaxDepth,omitempty"`
	AllowedDomains         []string `protobuf:"bytes,17,rep,name=AllowedDomains,proto3" json:"AllowedDomains,omitempty"`
	DisallowedURLFilters   *any.Any `protobuf:"bytes,18,opt,name=DisallowedURLFilters,proto3" json:"DisallowedURLFilters,omitempty"`
	AllowURLRevisit        bool     `protobuf:"varint,19,opt,name=AllowURLRevisit,proto3" json:"AllowURLRevisit,omitempty"`
	MaxBodySize            int32    `protobuf:"varint,20,opt,name=MaxBodySize,proto3" json:"MaxBodySize,omitempty"`
	CacheDir               string   `protobuf:"bytes,21,opt,name=CacheDir,proto3" json:"CacheDir,omitempty"`
	IgnoreRobotsTxt        bool     `protobuf:"varint,22,opt,name=IgnoreRobotsTxt,proto3" json:"IgnoreRobotsTxt,omitempty"`
	Async                  bool     `protobuf:"varint,3,opt,name=Async,proto3" json:"Async,omitempty"`
	ParseHTTPErrorResponse bool     `protobuf:"varint,4,opt,name=ParseHTTPErrorResponse,proto3" json:"ParseHTTPErrorResponse,omitempty"`
	DetectCharset          bool     `protobuf:"varint,5,opt,name=DetectCharset,proto3" json:"DetectCharset,omitempty"`
	RedirectHandler        *any.Any `protobuf:"bytes,6,opt,name=redirectHandler,proto3" json:"redirectHandler,omitempty"`
	CheckHead              bool     `protobuf:"varint,23,opt,name=CheckHead,proto3" json:"CheckHead,omitempty"`
	// Probably override with Storage
	Store *any.Any `protobuf:"bytes,7,opt,name=store,proto3" json:"store,omitempty"`
	// Probably override with Debug
	Debugger             *any.Any            `protobuf:"bytes,8,opt,name=debugger,proto3" json:"debugger,omitempty"`
	RobotsMap            map[string]*any.Any `protobuf:"bytes,24,rep,name=robotsMap,proto3" json:"robotsMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HTMLCallbacks        *any.Any            `protobuf:"bytes,25,opt,name=HTMLCallbacks,proto3" json:"HTMLCallbacks,omitempty"`
	XMLCallbacks         *any.Any            `protobuf:"bytes,26,opt,name=XMLCallbacks,proto3" json:"XMLCallbacks,omitempty"`
	RequestCallbacks     *any.Any            `protobuf:"bytes,27,opt,name=RequestCallbacks,proto3" json:"RequestCallbacks,omitempty"`
	ResponseCallbacks    *any.Any            `protobuf:"bytes,28,opt,name=ResponseCallbacks,proto3" json:"ResponseCallbacks,omitempty"`
	ErrorCallback        *any.Any            `protobuf:"bytes,29,opt,name=ErrorCallback,proto3" json:"ErrorCallback,omitempty"`
	ScrapedCallback      *any.Any            `protobuf:"bytes,30,opt,name=ScrapedCallback,proto3" json:"ScrapedCallback,omitempty"`
	RequestCount         uint32              `protobuf:"varint,9,opt,name=requestCount,proto3" json:"requestCount,omitempty"`
	ResponseCount        uint32              `protobuf:"varint,10,opt,name=responseCount,proto3" json:"responseCount,omitempty"`
	HttpBackend          *any.Any            `protobuf:"bytes,11,opt,name=httpBackend,proto3" json:"httpBackend,omitempty"`
	Wg                   *any.Any            `protobuf:"bytes,12,opt,name=wg,proto3" json:"wg,omitempty"`
	Lock                 *any.Any            `protobuf:"bytes,13,opt,name=lock,proto3" json:"lock,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Collector) Reset()         { *m = Collector{} }
func (m *Collector) String() string { return proto.CompactTextString(m) }
func (*Collector) ProtoMessage()    {}
func (*Collector) Descriptor() ([]byte, []int) {
	return fileDescriptor_9305884a292fdf82, []int{0}
}

func (m *Collector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Collector.Unmarshal(m, b)
}
func (m *Collector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Collector.Marshal(b, m, deterministic)
}
func (m *Collector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Collector.Merge(m, src)
}
func (m *Collector) XXX_Size() int {
	return xxx_messageInfo_Collector.Size(m)
}
func (m *Collector) XXX_DiscardUnknown() {
	xxx_messageInfo_Collector.DiscardUnknown(m)
}

var xxx_messageInfo_Collector proto.InternalMessageInfo

func (m *Collector) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Collector) GetUA() string {
	if m != nil {
		return m.UA
	}
	return ""
}

func (m *Collector) GetMaxDepth() int32 {
	if m != nil {
		return m.MaxDepth
	}
	return 0
}

func (m *Collector) GetAllowedDomains() []string {
	if m != nil {
		return m.AllowedDomains
	}
	return nil
}

func (m *Collector) GetDisallowedURLFilters() *any.Any {
	if m != nil {
		return m.DisallowedURLFilters
	}
	return nil
}

func (m *Collector) GetAllowURLRevisit() bool {
	if m != nil {
		return m.AllowURLRevisit
	}
	return false
}

func (m *Collector) GetMaxBodySize() int32 {
	if m != nil {
		return m.MaxBodySize
	}
	return 0
}

func (m *Collector) GetCacheDir() string {
	if m != nil {
		return m.CacheDir
	}
	return ""
}

func (m *Collector) GetIgnoreRobotsTxt() bool {
	if m != nil {
		return m.IgnoreRobotsTxt
	}
	return false
}

func (m *Collector) GetAsync() bool {
	if m != nil {
		return m.Async
	}
	return false
}

func (m *Collector) GetParseHTTPErrorResponse() bool {
	if m != nil {
		return m.ParseHTTPErrorResponse
	}
	return false
}

func (m *Collector) GetDetectCharset() bool {
	if m != nil {
		return m.DetectCharset
	}
	return false
}

func (m *Collector) GetRedirectHandler() *any.Any {
	if m != nil {
		return m.RedirectHandler
	}
	return nil
}

func (m *Collector) GetCheckHead() bool {
	if m != nil {
		return m.CheckHead
	}
	return false
}

func (m *Collector) GetStore() *any.Any {
	if m != nil {
		return m.Store
	}
	return nil
}

func (m *Collector) GetDebugger() *any.Any {
	if m != nil {
		return m.Debugger
	}
	return nil
}

func (m *Collector) GetRobotsMap() map[string]*any.Any {
	if m != nil {
		return m.RobotsMap
	}
	return nil
}

func (m *Collector) GetHTMLCallbacks() *any.Any {
	if m != nil {
		return m.HTMLCallbacks
	}
	return nil
}

func (m *Collector) GetXMLCallbacks() *any.Any {
	if m != nil {
		return m.XMLCallbacks
	}
	return nil
}

func (m *Collector) GetRequestCallbacks() *any.Any {
	if m != nil {
		return m.RequestCallbacks
	}
	return nil
}

func (m *Collector) GetResponseCallbacks() *any.Any {
	if m != nil {
		return m.ResponseCallbacks
	}
	return nil
}

func (m *Collector) GetErrorCallback() *any.Any {
	if m != nil {
		return m.ErrorCallback
	}
	return nil
}

func (m *Collector) GetScrapedCallback() *any.Any {
	if m != nil {
		return m.ScrapedCallback
	}
	return nil
}

func (m *Collector) GetRequestCount() uint32 {
	if m != nil {
		return m.RequestCount
	}
	return 0
}

func (m *Collector) GetResponseCount() uint32 {
	if m != nil {
		return m.ResponseCount
	}
	return 0
}

func (m *Collector) GetHttpBackend() *any.Any {
	if m != nil {
		return m.HttpBackend
	}
	return nil
}

func (m *Collector) GetWg() *any.Any {
	if m != nil {
		return m.Wg
	}
	return nil
}

func (m *Collector) GetLock() *any.Any {
	if m != nil {
		return m.Lock
	}
	return nil
}

func init() {
	proto.RegisterType((*Collector)(nil), "colly.protofiles.Collector")
	proto.RegisterMapType((map[string]*any.Any)(nil), "colly.protofiles.Collector.RobotsMapEntry")
}

func init() { proto.RegisterFile("collector.proto", fileDescriptor_9305884a292fdf82) }

var fileDescriptor_9305884a292fdf82 = []byte{
	// 625 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xd1, 0x4f, 0xdb, 0x3e,
	0x10, 0xc7, 0x95, 0x94, 0xf2, 0x6b, 0xae, 0xb4, 0x80, 0x7f, 0x1d, 0x33, 0x1d, 0x9b, 0x22, 0x84,
	0xa6, 0x88, 0x87, 0x30, 0x31, 0x09, 0x21, 0x1e, 0xa6, 0xb5, 0x0d, 0x53, 0x91, 0xa8, 0x84, 0x4c,
	0x2b, 0x4d, 0x7b, 0x73, 0x93, 0x23, 0x8d, 0x9a, 0xc5, 0x9d, 0xe3, 0x02, 0xdd, 0xbf, 0xbb, 0x7f,
	0x64, 0x8a, 0x4b, 0x5b, 0x52, 0x46, 0xde, 0x72, 0x5f, 0x7f, 0xee, 0x7c, 0xe7, 0x7c, 0x6d, 0xd8,
	0xf6, 0x45, 0x1c, 0xa3, 0xaf, 0x84, 0x74, 0x27, 0x52, 0x28, 0x41, 0x76, 0x32, 0x61, 0x36, 0x0f,
	0xee, 0xa2, 0x18, 0xd3, 0xe6, 0x7e, 0x28, 0x44, 0x18, 0xe3, 0x89, 0x96, 0x86, 0xd3, 0xbb, 0x13,
	0x9e, 0x3c, 0xad, 0x1f, 0xfe, 0x01, 0xb0, 0x3a, 0x8b, 0x02, 0xa4, 0x0e, 0xe6, 0x95, 0x47, 0x0d,
	0xdb, 0x70, 0x4a, 0xcc, 0xbc, 0xf2, 0xb2, 0x78, 0xd0, 0xa2, 0xa6, 0x6d, 0x38, 0x16, 0x33, 0x07,
	0x2d, 0xd2, 0x84, 0x4a, 0x8f, 0x3f, 0x7a, 0x38, 0x51, 0x23, 0x5a, 0xb7, 0x0d, 0xa7, 0xcc, 0x96,
	0x31, 0xf9, 0x08, 0xf5, 0x56, 0x1c, 0x8b, 0x07, 0x0c, 0x3c, 0xf1, 0x93, 0x47, 0x49, 0x4a, 0x77,
	0xed, 0x92, 0x63, 0xb1, 0x35, 0x95, 0x74, 0xa1, 0xe1, 0x45, 0x29, 0x9f, 0x8b, 0x03, 0x76, 0xfd,
	0x2d, 0x8a, 0x15, 0xca, 0x94, 0x12, 0xdb, 0x70, 0xaa, 0xa7, 0x0d, 0x77, 0xde, 0xab, 0xbb, 0xe8,
	0xd5, 0x6d, 0x25, 0x33, 0xf6, 0xcf, 0x0c, 0xe2, 0xc0, 0xb6, 0xae, 0x3d, 0x60, 0xd7, 0x0c, 0xef,
	0xa3, 0x34, 0x52, 0xf4, 0x7f, 0xdb, 0x70, 0x2a, 0x6c, 0x5d, 0x26, 0x36, 0x54, 0x7b, 0xfc, 0xb1,
	0x2d, 0x82, 0xd9, 0x6d, 0xf4, 0x1b, 0x69, 0x43, 0xb7, 0xfe, 0x5c, 0xca, 0x26, 0xeb, 0x70, 0x7f,
	0x84, 0x5e, 0x24, 0xe9, 0x1b, 0x3d, 0xef, 0x32, 0xce, 0xf6, 0xb9, 0x0a, 0x13, 0x21, 0x91, 0x89,
	0xa1, 0x50, 0x69, 0xff, 0x51, 0xd1, 0xbd, 0xf9, 0x3e, 0x6b, 0x32, 0x69, 0x40, 0xb9, 0x95, 0xce,
	0x12, 0x9f, 0x96, 0xf4, 0xfa, 0x3c, 0x20, 0x67, 0xb0, 0x77, 0xc3, 0x65, 0x8a, 0xdd, 0x7e, 0xff,
	0xe6, 0x52, 0x4a, 0x21, 0x19, 0xa6, 0x13, 0x91, 0xa4, 0x48, 0x37, 0x34, 0xf6, 0xca, 0x2a, 0x39,
	0x82, 0x9a, 0x87, 0x0a, 0x7d, 0xd5, 0x19, 0x65, 0x80, 0xa2, 0x65, 0x8d, 0xe7, 0x45, 0xf2, 0x05,
	0xb6, 0x25, 0x06, 0x91, 0x44, 0x5f, 0x75, 0x79, 0x12, 0xc4, 0x28, 0xe9, 0x66, 0xc1, 0x51, 0xae,
	0xc3, 0xe4, 0x00, 0xac, 0xce, 0x08, 0xfd, 0x71, 0x17, 0x79, 0x40, 0xdf, 0xea, 0x1d, 0x56, 0x02,
	0x39, 0x86, 0x72, 0xaa, 0x84, 0x44, 0xfa, 0x5f, 0x41, 0xcd, 0x39, 0x42, 0x3e, 0x41, 0x25, 0xc0,
	0xe1, 0x34, 0x0c, 0x51, 0xd2, 0x4a, 0x01, 0xbe, 0xa4, 0x48, 0x17, 0x2c, 0xa9, 0x0f, 0xaf, 0xc7,
	0x27, 0x94, 0xda, 0x25, 0xa7, 0x7a, 0x7a, 0xec, 0xae, 0xdb, 0xd7, 0x5d, 0xfa, 0xd3, 0x65, 0x0b,
	0xf8, 0x32, 0x51, 0x72, 0xc6, 0x56, 0xc9, 0xe4, 0x02, 0x6a, 0xdd, 0x7e, 0xef, 0xba, 0xc3, 0xe3,
	0x78, 0xc8, 0xfd, 0x71, 0x4a, 0xf7, 0x0b, 0x1a, 0xc8, 0xa3, 0xe4, 0x1c, 0xb6, 0xbe, 0x3f, 0x4f,
	0x6d, 0x16, 0xa4, 0xe6, 0x48, 0xf2, 0x15, 0x76, 0x18, 0xfe, 0x9a, 0x62, 0xaa, 0x56, 0xd9, 0xef,
	0x0a, 0xb2, 0x5f, 0xd0, 0xa4, 0x0d, 0xbb, 0x8b, 0xff, 0xbd, 0x2a, 0x71, 0x50, 0x50, 0xe2, 0x25,
	0x9e, 0xcd, 0xae, 0x8d, 0xb3, 0x50, 0xe8, 0xfb, 0xa2, 0xd9, 0x73, 0x68, 0xe6, 0x9e, 0x5b, 0x5f,
	0xf2, 0x09, 0x06, 0xcb, 0xec, 0x0f, 0x45, 0xee, 0x59, 0x83, 0xc9, 0x21, 0x6c, 0xc9, 0xa7, 0x99,
	0xc4, 0x34, 0x51, 0xd4, 0xb2, 0x0d, 0xa7, 0xc6, 0x72, 0x5a, 0xe6, 0x63, 0xb9, 0x68, 0x5a, 0x43,
	0xa0, 0xa1, 0xbc, 0x48, 0xce, 0xa0, 0x3a, 0x52, 0x6a, 0xd2, 0xe6, 0xfe, 0x18, 0x93, 0x80, 0x56,
	0x0b, 0xba, 0x78, 0x0e, 0x92, 0x23, 0x30, 0x1f, 0x42, 0xba, 0x55, 0x80, 0x9b, 0x0f, 0x21, 0x71,
	0x60, 0x23, 0x16, 0xfe, 0x98, 0xd6, 0x0a, 0x38, 0x4d, 0x34, 0x19, 0xd4, 0xf3, 0x36, 0x23, 0x3b,
	0x50, 0x1a, 0xe3, 0x4c, 0x3f, 0x8b, 0x16, 0xcb, 0x3e, 0xb3, 0x5b, 0x71, 0xcf, 0xe3, 0x29, 0xea,
	0xa7, 0xf1, 0xd5, 0x5b, 0xa1, 0x91, 0x0b, 0xf3, 0xdc, 0x68, 0x93, 0x1f, 0x2f, 0x1e, 0xe5, 0xe1,
	0xa6, 0xfe, 0xfe, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xb1, 0x82, 0x33, 0xc0, 0x05, 0x00,
	0x00,
}
