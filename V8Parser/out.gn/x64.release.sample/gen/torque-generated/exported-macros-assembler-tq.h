#ifndef V8_GEN_TORQUE_GENERATED_EXPORTED_MACROS_ASSEMBLER_TQ_H_
#define V8_GEN_TORQUE_GENERATED_EXPORTED_MACROS_ASSEMBLER_TQ_H_

#include "src/compiler/code-assembler.h"
#include "src/execution/frames.h"
#include "torque-generated/csa-types-tq.h"
#include "torque-generated/internal-class-definitions-tq.h"
namespace v8 {
namespace internal {
class V8_EXPORT_PRIVATE TorqueGeneratedExportedMacrosAssembler {
 public:
  explicit TorqueGeneratedExportedMacrosAssembler(compiler::CodeAssemblerState* state) : state_(state) {
    USE(state_);
  }
  void EnsureArrayLengthWritable(TNode<Context> p_context, TNode<Map> p_map, compiler::CodeAssemblerLabel* label_Bailout);
  TNode<Object> RequireObjectCoercible(TNode<Context> p_context, TNode<Object> p_value, const char* p_name);
  TNode<UintPtrT> ChangeUintPtrNumberToUintPtr(TNode<Number> p_value);
  TNode<UintPtrT> ChangeSafeIntegerNumberToUintPtr(TNode<Number> p_value, compiler::CodeAssemblerLabel* label_IfUIntPtrOverflow);
  TNode<UintPtrT> ToIndex(TNode<Context> p_context, TNode<Object> p_value, compiler::CodeAssemblerLabel* label_IfRangeError);
  TNode<UintPtrT> ConvertToRelativeIndex(TNode<Context> p_context, TNode<Object> p_index, TNode<UintPtrT> p_length);
  TNode<UintPtrT> ConvertToRelativeIndex(TNode<Number> p_indexNumber, TNode<UintPtrT> p_length);
  TNode<UintPtrT> ClampToIndexRange(TNode<Context> p_context, TNode<Object> p_index, TNode<UintPtrT> p_limit);
  TNode<UintPtrT> ClampToIndexRange(TNode<Number> p_indexNumber, TNode<UintPtrT> p_limit);
  TNode<BoolT> IsFastJSArray(TNode<Object> p_o, TNode<Context> p_context);
  void BranchIfFastJSArray(TNode<Object> p_o, TNode<Context> p_context, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
  void BranchIfFastJSArrayForRead(TNode<Object> p_o, TNode<Context> p_context, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
  TNode<BoolT> IsFastJSArrayWithNoCustomIteration(TNode<Context> p_context, TNode<Object> p_o);
  TNode<BoolT> IsFastJSArrayForReadWithNoCustomIteration(TNode<Context> p_context, TNode<Object> p_o);
  TNode<String> ToStringImpl(TNode<Context> p_context, TNode<Object> p_o);
  TNode<BoolT> IsIntegerOrSomeInfinity(TNode<Object> p_o);
  TorqueStructKeyValuePair LoadKeyValuePairNoSideEffects(TNode<Context> p_context, TNode<Object> p_o, compiler::CodeAssemblerLabel* label_MayHaveSideEffects);
  TorqueStructKeyValuePair LoadKeyValuePair(TNode<Context> p_context, TNode<Object> p_o);
  TNode<JSFunction> LoadTargetFromFrame();
  TorqueStructArgumentsInfo GetArgumentsFrameAndCount(TNode<Context> p_context, TNode<JSFunction> p_f);
  TNode<Number> MathPowImpl(TNode<Context> p_context, TNode<Object> p_base, TNode<Object> p_exponent);
  TNode<Context> CreatePromiseCapabilitiesExecutorContext(TNode<NativeContext> p_nativeContext, TNode<PromiseCapability> p_capability);
  TNode<PromiseCapability> CreatePromiseCapability(TNode<HeapObject> p_promise, TNode<HeapObject> p_resolve, TNode<HeapObject> p_reject);
  TorqueStructPromiseResolvingFunctions CreatePromiseResolvingFunctions(TNode<Context> p_context, TNode<JSPromise> p_promise, TNode<Object> p_debugEvent, TNode<NativeContext> p_nativeContext);
  void PerformPromiseThenImpl(TNode<Context> p_context, TNode<JSPromise> p_promise, TNode<HeapObject> p_onFulfilled, TNode<HeapObject> p_onRejected, TNode<HeapObject> p_resultPromiseOrCapability);
  TNode<Object> RegExpPrototypeExecBodyFast(TNode<Context> p_context, TNode<JSReceiver> p_receiver, TNode<String> p_string);
  TNode<Object> RegExpPrototypeMatchAllImpl(TNode<Context> p_context, TNode<NativeContext> p_nativeContext, TNode<Object> p_receiver, TNode<Object> p_string);
  TNode<BoolT> IsFastRegExpPermissive(TNode<Context> p_context, TNode<HeapObject> p_o);
  TNode<Object> RegExpExec(TNode<Context> p_context, TNode<JSReceiver> p_receiver, TNode<String> p_string);
  TNode<RegExpMatchInfo> RegExpPrototypeExecBodyWithoutResultFast(TNode<Context> p_context, TNode<JSRegExp> p_regexp, TNode<String> p_string, compiler::CodeAssemblerLabel* label_IfDidNotMatch);
  TNode<Object> LoadLastIndex(TNode<Context> p_context, TNode<Object> p_regexp, bool p_isFastPath);
  TNode<Number> LoadLastIndexAsLength(TNode<Context> p_context, TNode<JSRegExp> p_regexp, bool p_isFastPath);
  void StoreLastIndex(TNode<Context> p_context, TNode<Object> p_regexp, TNode<Number> p_value, bool p_isFastPath);
  TNode<BoolT> IsRegExp(TNode<Context> p_context, TNode<Object> p_obj);
  TNode<Object> RegExpCreate(TNode<Context> p_context, TNode<NativeContext> p_nativeContext, TNode<Object> p_maybeString, TNode<String> p_flags);
  TNode<Object> RegExpCreate(TNode<Context> p_context, TNode<Map> p_initialMap, TNode<Object> p_maybeString, TNode<String> p_flags);
  TNode<JSTypedArray> TypedArrayCreateByLength(TNode<Context> p_context, TNode<JSReceiver> p_constructor, TNode<Number> p_length, const char* p_methodName);
  TNode<JSTypedArray> TypedArraySpeciesCreateByLength(TNode<Context> p_context, const char* p_methodName, TNode<JSTypedArray> p_exemplar, TNode<UintPtrT> p_length);
  TNode<BoolT> IsJSArgumentsObjectWithLength(TNode<Context> p_context, TNode<Object> p_o);
  TNode<PrototypeInfo> LoadMapPrototypeInfo(TNode<Map> p_m, compiler::CodeAssemblerLabel* label_HasNoPrototypeInfo);
  void TestConstexpr1();
  void TestConstexprIf();
  void TestConstexprReturn();
  TNode<Oddball> TestGotoLabel();
  TNode<Oddball> TestGotoLabelWithOneParameter();
  TNode<Oddball> TestGotoLabelWithTwoParameters();
  void TestBuiltinSpecialization(TNode<Context> p_c);
  TNode<Oddball> TestPartiallyUnusedLabel();
  void TestMacroSpecialization();
  TNode<Oddball> TestFunctionPointers(TNode<Context> p_context);
  TNode<Oddball> TestVariableRedeclaration(TNode<Context> p_context);
  TNode<Smi> TestTernaryOperator(TNode<Smi> p_x);
  void TestFunctionPointerToGeneric(TNode<Context> p_c);
  TNode<BuiltinPtr> TestTypeAlias(TNode<BuiltinPtr> p_x);
  TNode<Oddball> TestUnsafeCast(TNode<Context> p_context, TNode<Number> p_n);
  void TestHexLiteral();
  void TestLargeIntegerLiterals(TNode<Context> p_c);
  void TestMultilineAssert();
  void TestNewlineInString();
  void TestModuleConstBindings();
  void TestLocalConstBindings();
  TNode<Smi> TestStruct1(TorqueStructTestStructA_0 p_i);
  TorqueStructTestStructA_0 TestStruct2(TNode<Context> p_context);
  TorqueStructTestStructA_0 TestStruct3(TNode<Context> p_context);
  TorqueStructTestStructC_0 TestStruct4(TNode<Context> p_context);
  void CallTestStructInLabel(TNode<Context> p_context);
  void TestForLoop();
  void TestSubtyping(TNode<Smi> p_x);
  void TestTypeswitch(TNode<Context> p_context);
  void TestTypeswitchAsanLsanFailure(TNode<Context> p_context, TNode<Object> p_obj);
  void TestGenericOverload(TNode<Context> p_context);
  void TestEquality(TNode<Context> p_context);
  TNode<BoolT> TestOrAnd(TNode<BoolT> p_x, TNode<BoolT> p_y, TNode<BoolT> p_z);
  TNode<BoolT> TestAndOr(TNode<BoolT> p_x, TNode<BoolT> p_y, TNode<BoolT> p_z);
  void TestLogicalOperators();
  TNode<Smi> TestCall(TNode<Smi> p_i, compiler::CodeAssemblerLabel* label_A);
  void TestOtherwiseWithCode1();
  void TestOtherwiseWithCode2();
  void TestOtherwiseWithCode3();
  void TestForwardLabel();
  void TestQualifiedAccess(TNode<Context> p_context);
  TNode<Smi> TestCatch1(TNode<Context> p_context);
  void TestCatch2Wrapper(TNode<Context> p_context);
  TNode<Smi> TestCatch2(TNode<Context> p_context);
  void TestCatch3WrapperWithLabel(TNode<Context> p_context, compiler::CodeAssemblerLabel* label__Abort);
  TNode<Smi> TestCatch3(TNode<Context> p_context);
  void TestIterator(TNode<Context> p_context, TNode<JSReceiver> p_o, TNode<Map> p_map);
  void TestFrame1(TNode<Context> p_context);
  void TestNew(TNode<Context> p_context);
  void TestStructConstructor(TNode<Context> p_context);
  void TestInternalClass(TNode<Context> p_context);
  void TestConstInStructs();
  TNode<Object> TestNewFixedArrayFromSpread(TNode<Context> p_context);
  void TestReferences();
  void TestSlices();
  TNode<Oddball> TestSliceEnumeration(TNode<Context> p_context);
  void TestStaticAssert();
  void TestLoadEliminationFixed(TNode<Context> p_context);
  void TestLoadEliminationVariable(TNode<Context> p_context);
  TNode<Smi> TestRedundantArrayElementCheck(TNode<Context> p_context);
  TNode<Smi> TestRedundantSmiCheck(TNode<Context> p_context);
  TNode<IntPtrT> TestGenericStruct1();
  TorqueStructTestTuple_TestTuple_intptr_Smi_TestTuple_Smi_intptr_0 TestGenericStruct2();
  void TestBranchOnBoolOptimization(TNode<Context> p_context, TNode<Smi> p_input);
  TNode<Map> LoadHeapObjectMap(TNode<HeapObject> p_o);
  void StoreHeapObjectMap(TNode<HeapObject> p_o, TNode<Map> p_v);
  TNode<Smi> LoadContextLength(TNode<Context> p_o);
  void StoreContextLength(TNode<Context> p_o, TNode<Smi> p_v);
  TNode<ScopeInfo> LoadContextScopeInfo(TNode<Context> p_o);
  void StoreContextScopeInfo(TNode<Context> p_o, TNode<ScopeInfo> p_v);
  TNode<Object> LoadContextPrevious(TNode<Context> p_o);
  void StoreContextPrevious(TNode<Context> p_o, TNode<Object> p_v);
  TNode<Object> LoadJSReceiverPropertiesOrHash(TNode<JSReceiver> p_o);
  void StoreJSReceiverPropertiesOrHash(TNode<JSReceiver> p_o, TNode<Object> p_v);
  TNode<Float64T> LoadHeapNumberValue(TNode<HeapNumber> p_o);
  void StoreHeapNumberValue(TNode<HeapNumber> p_o, TNode<Float64T> p_v);
  TNode<Uint32T> LoadNameHashField(TNode<Name> p_o);
  void StoreNameHashField(TNode<Name> p_o, TNode<Uint32T> p_v);
  TNode<Int32T> LoadStringLength(TNode<String> p_o);
  void StoreStringLength(TNode<String> p_o, TNode<Int32T> p_v);
  TNode<Int32T> LoadSymbolFlags(TNode<Symbol> p_o);
  void StoreSymbolFlags(TNode<Symbol> p_o, TNode<Int32T> p_v);
  TNode<PrimitiveHeapObject> LoadSymbolDescription(TNode<Symbol> p_o);
  void StoreSymbolDescription(TNode<Symbol> p_o, TNode<PrimitiveHeapObject> p_v);
  TNode<Float64T> LoadOddballToNumberRaw(TNode<Oddball> p_o);
  void StoreOddballToNumberRaw(TNode<Oddball> p_o, TNode<Float64T> p_v);
  TNode<String> LoadOddballToString(TNode<Oddball> p_o);
  void StoreOddballToString(TNode<Oddball> p_o, TNode<String> p_v);
  TNode<Number> LoadOddballToNumber(TNode<Oddball> p_o);
  void StoreOddballToNumber(TNode<Oddball> p_o, TNode<Number> p_v);
  TNode<String> LoadOddballTypeOf(TNode<Oddball> p_o);
  void StoreOddballTypeOf(TNode<Oddball> p_o, TNode<String> p_v);
  TNode<Smi> LoadOddballKind(TNode<Oddball> p_o);
  void StoreOddballKind(TNode<Oddball> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadFixedArrayBaseLength(TNode<FixedArrayBase> p_o);
  void StoreFixedArrayBaseLength(TNode<FixedArrayBase> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadWeakFixedArrayLength(TNode<WeakFixedArray> p_o);
  void StoreWeakFixedArrayLength(TNode<WeakFixedArray> p_o, TNode<Smi> p_v);
  TNode<RawPtrT> LoadForeignForeignAddress(TNode<Foreign> p_o);
  void StoreForeignForeignAddress(TNode<Foreign> p_o, TNode<RawPtrT> p_v);
  TNode<FixedArrayBase> LoadJSObjectElements(TNode<JSObject> p_o);
  void StoreJSObjectElements(TNode<JSObject> p_o, TNode<FixedArrayBase> p_v);
  TNode<HeapObject> LoadJSProxyTarget(TNode<JSProxy> p_o);
  void StoreJSProxyTarget(TNode<JSProxy> p_o, TNode<HeapObject> p_v);
  TNode<HeapObject> LoadJSProxyHandler(TNode<JSProxy> p_o);
  void StoreJSProxyHandler(TNode<JSProxy> p_o, TNode<HeapObject> p_v);
  TNode<SharedFunctionInfo> LoadJSFunctionSharedFunctionInfo(TNode<JSFunction> p_o);
  void StoreJSFunctionSharedFunctionInfo(TNode<JSFunction> p_o, TNode<SharedFunctionInfo> p_v);
  TNode<Context> LoadJSFunctionContext(TNode<JSFunction> p_o);
  void StoreJSFunctionContext(TNode<JSFunction> p_o, TNode<Context> p_v);
  TNode<FeedbackCell> LoadJSFunctionFeedbackCell(TNode<JSFunction> p_o);
  void StoreJSFunctionFeedbackCell(TNode<JSFunction> p_o, TNode<FeedbackCell> p_v);
  TNode<Code> LoadJSFunctionCode(TNode<JSFunction> p_o);
  void StoreJSFunctionCode(TNode<JSFunction> p_o, TNode<Code> p_v);
  TNode<HeapObject> LoadJSFunctionPrototypeOrInitialMap(TNode<JSFunction> p_o);
  void StoreJSFunctionPrototypeOrInitialMap(TNode<JSFunction> p_o, TNode<HeapObject> p_v);
  TNode<JSReceiver> LoadJSBoundFunctionBoundTargetFunction(TNode<JSBoundFunction> p_o);
  void StoreJSBoundFunctionBoundTargetFunction(TNode<JSBoundFunction> p_o, TNode<JSReceiver> p_v);
  TNode<Object> LoadJSBoundFunctionBoundThis(TNode<JSBoundFunction> p_o);
  void StoreJSBoundFunctionBoundThis(TNode<JSBoundFunction> p_o, TNode<Object> p_v);
  TNode<FixedArray> LoadJSBoundFunctionBoundArguments(TNode<JSBoundFunction> p_o);
  void StoreJSBoundFunctionBoundArguments(TNode<JSBoundFunction> p_o, TNode<FixedArray> p_v);
  TNode<Uint8T> LoadMapInstanceSizeInWords(TNode<Map> p_o);
  void StoreMapInstanceSizeInWords(TNode<Map> p_o, TNode<Uint8T> p_v);
  TNode<Uint8T> LoadMapInObjectPropertiesStartOrConstructorFunctionIndex(TNode<Map> p_o);
  void StoreMapInObjectPropertiesStartOrConstructorFunctionIndex(TNode<Map> p_o, TNode<Uint8T> p_v);
  TNode<Uint8T> LoadMapUsedOrUnusedInstanceSizeInWords(TNode<Map> p_o);
  void StoreMapUsedOrUnusedInstanceSizeInWords(TNode<Map> p_o, TNode<Uint8T> p_v);
  TNode<Uint8T> LoadMapVisitorId(TNode<Map> p_o);
  void StoreMapVisitorId(TNode<Map> p_o, TNode<Uint8T> p_v);
  TNode<Uint16T> LoadMapInstanceType(TNode<Map> p_o);
  void StoreMapInstanceType(TNode<Map> p_o, TNode<Uint16T> p_v);
  TNode<Uint8T> LoadMapBitField(TNode<Map> p_o);
  void StoreMapBitField(TNode<Map> p_o, TNode<Uint8T> p_v);
  TNode<Uint8T> LoadMapBitField2(TNode<Map> p_o);
  void StoreMapBitField2(TNode<Map> p_o, TNode<Uint8T> p_v);
  TNode<Uint32T> LoadMapBitField3(TNode<Map> p_o);
  void StoreMapBitField3(TNode<Map> p_o, TNode<Uint32T> p_v);
  TNode<HeapObject> LoadMapPrototype(TNode<Map> p_o);
  void StoreMapPrototype(TNode<Map> p_o, TNode<HeapObject> p_v);
  TNode<Object> LoadMapConstructorOrBackPointerOrNativeContext(TNode<Map> p_o);
  void StoreMapConstructorOrBackPointerOrNativeContext(TNode<Map> p_o, TNode<Object> p_v);
  TNode<DescriptorArray> LoadMapInstanceDescriptors(TNode<Map> p_o);
  void StoreMapInstanceDescriptors(TNode<Map> p_o, TNode<DescriptorArray> p_v);
  TNode<WeakFixedArray> LoadMapDependentCode(TNode<Map> p_o);
  void StoreMapDependentCode(TNode<Map> p_o, TNode<WeakFixedArray> p_v);
  TNode<Object> LoadMapPrototypeValidityCell(TNode<Map> p_o);
  void StoreMapPrototypeValidityCell(TNode<Map> p_o, TNode<Object> p_v);
  TNode<MaybeObject> LoadMapTransitionsOrPrototypeInfo(TNode<Map> p_o);
  void StoreMapTransitionsOrPrototypeInfo(TNode<Map> p_o, TNode<MaybeObject> p_v);
  TNode<JSArrayBuffer> LoadJSArrayBufferViewBuffer(TNode<JSArrayBufferView> p_o);
  void StoreJSArrayBufferViewBuffer(TNode<JSArrayBufferView> p_o, TNode<JSArrayBuffer> p_v);
  TNode<UintPtrT> LoadJSArrayBufferViewByteOffset(TNode<JSArrayBufferView> p_o);
  void StoreJSArrayBufferViewByteOffset(TNode<JSArrayBufferView> p_o, TNode<UintPtrT> p_v);
  TNode<UintPtrT> LoadJSArrayBufferViewByteLength(TNode<JSArrayBufferView> p_o);
  void StoreJSArrayBufferViewByteLength(TNode<JSArrayBufferView> p_o, TNode<UintPtrT> p_v);
  TNode<UintPtrT> LoadJSTypedArrayLength(TNode<JSTypedArray> p_o);
  void StoreJSTypedArrayLength(TNode<JSTypedArray> p_o, TNode<UintPtrT> p_v);
  TNode<RawPtrT> LoadJSTypedArrayExternalPointer(TNode<JSTypedArray> p_o);
  void StoreJSTypedArrayExternalPointer(TNode<JSTypedArray> p_o, TNode<RawPtrT> p_v);
  TNode<Object> LoadJSTypedArrayBasePointer(TNode<JSTypedArray> p_o);
  void StoreJSTypedArrayBasePointer(TNode<JSTypedArray> p_o, TNode<Object> p_v);
  TNode<Object> LoadDataHandlerSmiHandler(TNode<DataHandler> p_o);
  void StoreDataHandlerSmiHandler(TNode<DataHandler> p_o, TNode<Object> p_v);
  TNode<Object> LoadDataHandlerValidityCell(TNode<DataHandler> p_o);
  void StoreDataHandlerValidityCell(TNode<DataHandler> p_o, TNode<Object> p_v);
  TNode<MaybeObject> LoadDataHandlerData1(TNode<DataHandler> p_o);
  void StoreDataHandlerData1(TNode<DataHandler> p_o, TNode<MaybeObject> p_v);
  TNode<MaybeObject> LoadDataHandlerData2(TNode<DataHandler> p_o);
  void StoreDataHandlerData2(TNode<DataHandler> p_o, TNode<MaybeObject> p_v);
  TNode<MaybeObject> LoadDataHandlerData3(TNode<DataHandler> p_o);
  void StoreDataHandlerData3(TNode<DataHandler> p_o, TNode<MaybeObject> p_v);
  TNode<AllocationSite> LoadAllocationMementoAllocationSite(TNode<AllocationMemento> p_o);
  void StoreAllocationMementoAllocationSite(TNode<AllocationMemento> p_o, TNode<AllocationSite> p_v);
  TNode<Object> LoadCallHandlerInfoCallback(TNode<CallHandlerInfo> p_o);
  void StoreCallHandlerInfoCallback(TNode<CallHandlerInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadCallHandlerInfoJsCallback(TNode<CallHandlerInfo> p_o);
  void StoreCallHandlerInfoJsCallback(TNode<CallHandlerInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadCallHandlerInfoData(TNode<CallHandlerInfo> p_o);
  void StoreCallHandlerInfoData(TNode<CallHandlerInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadInterceptorInfoGetter(TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoGetter(TNode<InterceptorInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadInterceptorInfoSetter(TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoSetter(TNode<InterceptorInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadInterceptorInfoQuery(TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoQuery(TNode<InterceptorInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadInterceptorInfoDescriptor(TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoDescriptor(TNode<InterceptorInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadInterceptorInfoDeleter(TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoDeleter(TNode<InterceptorInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadInterceptorInfoEnumerator(TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoEnumerator(TNode<InterceptorInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadInterceptorInfoDefiner(TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoDefiner(TNode<InterceptorInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadInterceptorInfoData(TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoData(TNode<InterceptorInfo> p_o, TNode<Object> p_v);
  TNode<Smi> LoadInterceptorInfoFlags(TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoFlags(TNode<InterceptorInfo> p_o, TNode<Smi> p_v);
  TNode<Object> LoadAccessCheckInfoCallback(TNode<AccessCheckInfo> p_o);
  void StoreAccessCheckInfoCallback(TNode<AccessCheckInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadAccessCheckInfoNamedInterceptor(TNode<AccessCheckInfo> p_o);
  void StoreAccessCheckInfoNamedInterceptor(TNode<AccessCheckInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadAccessCheckInfoIndexedInterceptor(TNode<AccessCheckInfo> p_o);
  void StoreAccessCheckInfoIndexedInterceptor(TNode<AccessCheckInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadAccessCheckInfoData(TNode<AccessCheckInfo> p_o);
  void StoreAccessCheckInfoData(TNode<AccessCheckInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadAccessorInfoName(TNode<AccessorInfo> p_o);
  void StoreAccessorInfoName(TNode<AccessorInfo> p_o, TNode<Object> p_v);
  TNode<Smi> LoadAccessorInfoFlags(TNode<AccessorInfo> p_o);
  void StoreAccessorInfoFlags(TNode<AccessorInfo> p_o, TNode<Smi> p_v);
  TNode<Object> LoadAccessorInfoExpectedReceiverType(TNode<AccessorInfo> p_o);
  void StoreAccessorInfoExpectedReceiverType(TNode<AccessorInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadAccessorInfoSetter(TNode<AccessorInfo> p_o);
  void StoreAccessorInfoSetter(TNode<AccessorInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadAccessorInfoGetter(TNode<AccessorInfo> p_o);
  void StoreAccessorInfoGetter(TNode<AccessorInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadAccessorInfoJsGetter(TNode<AccessorInfo> p_o);
  void StoreAccessorInfoJsGetter(TNode<AccessorInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadAccessorInfoData(TNode<AccessorInfo> p_o);
  void StoreAccessorInfoData(TNode<AccessorInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadJSSloppyArgumentsObjectLength(TNode<JSArgumentsObject> p_o);
  void StoreJSSloppyArgumentsObjectLength(TNode<JSArgumentsObject> p_o, TNode<Object> p_v);
  TNode<Object> LoadJSSloppyArgumentsObjectCallee(TNode<JSArgumentsObject> p_o);
  void StoreJSSloppyArgumentsObjectCallee(TNode<JSArgumentsObject> p_o, TNode<Object> p_v);
  TNode<Object> LoadJSStrictArgumentsObjectLength(TNode<JSArgumentsObject> p_o);
  void StoreJSStrictArgumentsObjectLength(TNode<JSArgumentsObject> p_o, TNode<Object> p_v);
  TNode<Smi> LoadAliasedArgumentsEntryAliasedContextSlot(TNode<AliasedArgumentsEntry> p_o);
  void StoreAliasedArgumentsEntryAliasedContextSlot(TNode<AliasedArgumentsEntry> p_o, TNode<Smi> p_v);
  TNode<Object> LoadCellValue(TNode<Cell> p_o);
  void StoreCellValue(TNode<Cell> p_o, TNode<Object> p_v);
  TNode<ByteArray> LoadSourcePositionTableWithFrameCacheSourcePositionTable(TNode<SourcePositionTableWithFrameCache> p_o);
  void StoreSourcePositionTableWithFrameCacheSourcePositionTable(TNode<SourcePositionTableWithFrameCache> p_o, TNode<ByteArray> p_v);
  TNode<Object> LoadSourcePositionTableWithFrameCacheStackFrameCache(TNode<SourcePositionTableWithFrameCache> p_o);
  void StoreSourcePositionTableWithFrameCacheStackFrameCache(TNode<SourcePositionTableWithFrameCache> p_o, TNode<Object> p_v);
  TNode<FixedArray> LoadBytecodeArrayConstantPool(TNode<BytecodeArray> p_o);
  void StoreBytecodeArrayConstantPool(TNode<BytecodeArray> p_o, TNode<FixedArray> p_v);
  TNode<ByteArray> LoadBytecodeArrayHandlerTable(TNode<BytecodeArray> p_o);
  void StoreBytecodeArrayHandlerTable(TNode<BytecodeArray> p_o, TNode<ByteArray> p_v);
  TNode<HeapObject> LoadBytecodeArraySourcePositionTable(TNode<BytecodeArray> p_o);
  void StoreBytecodeArraySourcePositionTable(TNode<BytecodeArray> p_o, TNode<HeapObject> p_v);
  TNode<Int32T> LoadBytecodeArrayFrameSize(TNode<BytecodeArray> p_o);
  void StoreBytecodeArrayFrameSize(TNode<BytecodeArray> p_o, TNode<Int32T> p_v);
  TNode<Int32T> LoadBytecodeArrayParameterSize(TNode<BytecodeArray> p_o);
  void StoreBytecodeArrayParameterSize(TNode<BytecodeArray> p_o, TNode<Int32T> p_v);
  TNode<Int32T> LoadBytecodeArrayIncomingNewTargetOrGeneratorRegister(TNode<BytecodeArray> p_o);
  void StoreBytecodeArrayIncomingNewTargetOrGeneratorRegister(TNode<BytecodeArray> p_o, TNode<Int32T> p_v);
  TNode<Int8T> LoadBytecodeArrayOsrNestingLevel(TNode<BytecodeArray> p_o);
  void StoreBytecodeArrayOsrNestingLevel(TNode<BytecodeArray> p_o, TNode<Int8T> p_v);
  TNode<Int8T> LoadBytecodeArrayBytecodeAge(TNode<BytecodeArray> p_o);
  void StoreBytecodeArrayBytecodeAge(TNode<BytecodeArray> p_o, TNode<Int8T> p_v);
  TNode<Object> LoadTuple2Value1(TNode<Tuple2> p_o);
  void StoreTuple2Value1(TNode<Tuple2> p_o, TNode<Object> p_v);
  TNode<Object> LoadTuple2Value2(TNode<Tuple2> p_o);
  void StoreTuple2Value2(TNode<Tuple2> p_o, TNode<Object> p_v);
  TNode<SharedFunctionInfo> LoadDebugInfoShared(TNode<DebugInfo> p_o);
  void StoreDebugInfoShared(TNode<DebugInfo> p_o, TNode<SharedFunctionInfo> p_v);
  TNode<Smi> LoadDebugInfoDebuggerHints(TNode<DebugInfo> p_o);
  void StoreDebugInfoDebuggerHints(TNode<DebugInfo> p_o, TNode<Smi> p_v);
  TNode<HeapObject> LoadDebugInfoScript(TNode<DebugInfo> p_o);
  void StoreDebugInfoScript(TNode<DebugInfo> p_o, TNode<HeapObject> p_v);
  TNode<HeapObject> LoadDebugInfoOriginalBytecodeArray(TNode<DebugInfo> p_o);
  void StoreDebugInfoOriginalBytecodeArray(TNode<DebugInfo> p_o, TNode<HeapObject> p_v);
  TNode<HeapObject> LoadDebugInfoDebugBytecodeArray(TNode<DebugInfo> p_o);
  void StoreDebugInfoDebugBytecodeArray(TNode<DebugInfo> p_o, TNode<HeapObject> p_v);
  TNode<FixedArray> LoadDebugInfoBreakPoints(TNode<DebugInfo> p_o);
  void StoreDebugInfoBreakPoints(TNode<DebugInfo> p_o, TNode<FixedArray> p_v);
  TNode<Smi> LoadDebugInfoFlags(TNode<DebugInfo> p_o);
  void StoreDebugInfoFlags(TNode<DebugInfo> p_o, TNode<Smi> p_v);
  TNode<HeapObject> LoadDebugInfoCoverageInfo(TNode<DebugInfo> p_o);
  void StoreDebugInfoCoverageInfo(TNode<DebugInfo> p_o, TNode<HeapObject> p_v);
  TNode<FixedArray> LoadEnumCacheKeys(TNode<EnumCache> p_o);
  void StoreEnumCacheKeys(TNode<EnumCache> p_o, TNode<FixedArray> p_v);
  TNode<FixedArray> LoadEnumCacheIndices(TNode<EnumCache> p_o);
  void StoreEnumCacheIndices(TNode<EnumCache> p_o, TNode<FixedArray> p_v);
  TNode<Object> LoadAccessorPairGetter(TNode<AccessorPair> p_o);
  void StoreAccessorPairGetter(TNode<AccessorPair> p_o, TNode<Object> p_v);
  TNode<Object> LoadAccessorPairSetter(TNode<AccessorPair> p_o);
  void StoreAccessorPairSetter(TNode<AccessorPair> p_o, TNode<Object> p_v);
  TNode<Smi> LoadClassPositionsStart(TNode<ClassPositions> p_o);
  void StoreClassPositionsStart(TNode<ClassPositions> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadClassPositionsEnd(TNode<ClassPositions> p_o);
  void StoreClassPositionsEnd(TNode<ClassPositions> p_o, TNode<Smi> p_v);
  TNode<Uint16T> LoadDescriptorArrayNumberOfAllDescriptors(TNode<DescriptorArray> p_o);
  void StoreDescriptorArrayNumberOfAllDescriptors(TNode<DescriptorArray> p_o, TNode<Uint16T> p_v);
  TNode<Uint16T> LoadDescriptorArrayNumberOfDescriptors(TNode<DescriptorArray> p_o);
  void StoreDescriptorArrayNumberOfDescriptors(TNode<DescriptorArray> p_o, TNode<Uint16T> p_v);
  TNode<Uint16T> LoadDescriptorArrayRawNumberOfMarkedDescriptors(TNode<DescriptorArray> p_o);
  void StoreDescriptorArrayRawNumberOfMarkedDescriptors(TNode<DescriptorArray> p_o, TNode<Uint16T> p_v);
  TNode<Uint16T> LoadDescriptorArrayFiller16Bits(TNode<DescriptorArray> p_o);
  void StoreDescriptorArrayFiller16Bits(TNode<DescriptorArray> p_o, TNode<Uint16T> p_v);
  TNode<EnumCache> LoadDescriptorArrayEnumCache(TNode<DescriptorArray> p_o);
  void StoreDescriptorArrayEnumCache(TNode<DescriptorArray> p_o, TNode<EnumCache> p_v);
  TNode<Smi> LoadEmbedderDataArrayLength(TNode<EmbedderDataArray> p_o);
  void StoreEmbedderDataArrayLength(TNode<EmbedderDataArray> p_o, TNode<Smi> p_v);
  TNode<HeapObject> LoadFeedbackCellValue(TNode<FeedbackCell> p_o);
  void StoreFeedbackCellValue(TNode<FeedbackCell> p_o, TNode<HeapObject> p_v);
  TNode<Int32T> LoadFeedbackCellInterruptBudget(TNode<FeedbackCell> p_o);
  void StoreFeedbackCellInterruptBudget(TNode<FeedbackCell> p_o, TNode<Int32T> p_v);
  TNode<SharedFunctionInfo> LoadFeedbackVectorSharedFunctionInfo(TNode<FeedbackVector> p_o);
  void StoreFeedbackVectorSharedFunctionInfo(TNode<FeedbackVector> p_o, TNode<SharedFunctionInfo> p_v);
  TNode<MaybeObject> LoadFeedbackVectorOptimizedCodeWeakOrSmi(TNode<FeedbackVector> p_o);
  void StoreFeedbackVectorOptimizedCodeWeakOrSmi(TNode<FeedbackVector> p_o, TNode<MaybeObject> p_v);
  TNode<FixedArray> LoadFeedbackVectorClosureFeedbackCellArray(TNode<FeedbackVector> p_o);
  void StoreFeedbackVectorClosureFeedbackCellArray(TNode<FeedbackVector> p_o, TNode<FixedArray> p_v);
  TNode<Int32T> LoadFeedbackVectorLength(TNode<FeedbackVector> p_o);
  void StoreFeedbackVectorLength(TNode<FeedbackVector> p_o, TNode<Int32T> p_v);
  TNode<Int32T> LoadFeedbackVectorInvocationCount(TNode<FeedbackVector> p_o);
  void StoreFeedbackVectorInvocationCount(TNode<FeedbackVector> p_o, TNode<Int32T> p_v);
  TNode<Int32T> LoadFeedbackVectorProfilerTicks(TNode<FeedbackVector> p_o);
  void StoreFeedbackVectorProfilerTicks(TNode<FeedbackVector> p_o, TNode<Int32T> p_v);
  TNode<Uint32T> LoadFeedbackVectorPadding(TNode<FeedbackVector> p_o);
  void StoreFeedbackVectorPadding(TNode<FeedbackVector> p_o, TNode<Uint32T> p_v);
  TNode<Smi> LoadWeakArrayListCapacity(TNode<WeakArrayList> p_o);
  void StoreWeakArrayListCapacity(TNode<WeakArrayList> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadWeakArrayListLength(TNode<WeakArrayList> p_o);
  void StoreWeakArrayListLength(TNode<WeakArrayList> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadFreeSpaceSize(TNode<FreeSpace> p_o);
  void StoreFreeSpaceSize(TNode<FreeSpace> p_o, TNode<Smi> p_v);
  TNode<MaybeObject> LoadFreeSpaceNext(TNode<FreeSpace> p_o);
  void StoreFreeSpaceNext(TNode<FreeSpace> p_o, TNode<MaybeObject> p_v);
  TNode<String> LoadJSDateTimeFormatLocale(TNode<JSDateTimeFormat> p_o);
  void StoreJSDateTimeFormatLocale(TNode<JSDateTimeFormat> p_o, TNode<String> p_v);
  TNode<Foreign> LoadJSDateTimeFormatIcuLocale(TNode<JSDateTimeFormat> p_o);
  void StoreJSDateTimeFormatIcuLocale(TNode<JSDateTimeFormat> p_o, TNode<Foreign> p_v);
  TNode<Foreign> LoadJSDateTimeFormatIcuSimpleDateFormat(TNode<JSDateTimeFormat> p_o);
  void StoreJSDateTimeFormatIcuSimpleDateFormat(TNode<JSDateTimeFormat> p_o, TNode<Foreign> p_v);
  TNode<Foreign> LoadJSDateTimeFormatIcuDateIntervalFormat(TNode<JSDateTimeFormat> p_o);
  void StoreJSDateTimeFormatIcuDateIntervalFormat(TNode<JSDateTimeFormat> p_o, TNode<Foreign> p_v);
  TNode<HeapObject> LoadJSDateTimeFormatBoundFormat(TNode<JSDateTimeFormat> p_o);
  void StoreJSDateTimeFormatBoundFormat(TNode<JSDateTimeFormat> p_o, TNode<HeapObject> p_v);
  TNode<Smi> LoadJSDateTimeFormatFlags(TNode<JSDateTimeFormat> p_o);
  void StoreJSDateTimeFormatFlags(TNode<JSDateTimeFormat> p_o, TNode<Smi> p_v);
  TNode<Foreign> LoadJSDisplayNamesInternal(TNode<JSDisplayNames> p_o);
  void StoreJSDisplayNamesInternal(TNode<JSDisplayNames> p_o, TNode<Foreign> p_v);
  TNode<Smi> LoadJSDisplayNamesFlags(TNode<JSDisplayNames> p_o);
  void StoreJSDisplayNamesFlags(TNode<JSDisplayNames> p_o, TNode<Smi> p_v);
  TNode<String> LoadJSListFormatLocale(TNode<JSListFormat> p_o);
  void StoreJSListFormatLocale(TNode<JSListFormat> p_o, TNode<String> p_v);
  TNode<Foreign> LoadJSListFormatIcuFormatter(TNode<JSListFormat> p_o);
  void StoreJSListFormatIcuFormatter(TNode<JSListFormat> p_o, TNode<Foreign> p_v);
  TNode<Smi> LoadJSListFormatFlags(TNode<JSListFormat> p_o);
  void StoreJSListFormatFlags(TNode<JSListFormat> p_o, TNode<Smi> p_v);
  TNode<String> LoadJSNumberFormatLocale(TNode<JSNumberFormat> p_o);
  void StoreJSNumberFormatLocale(TNode<JSNumberFormat> p_o, TNode<String> p_v);
  TNode<String> LoadJSNumberFormatNumberingSystem(TNode<JSNumberFormat> p_o);
  void StoreJSNumberFormatNumberingSystem(TNode<JSNumberFormat> p_o, TNode<String> p_v);
  TNode<Foreign> LoadJSNumberFormatIcuNumberFormatter(TNode<JSNumberFormat> p_o);
  void StoreJSNumberFormatIcuNumberFormatter(TNode<JSNumberFormat> p_o, TNode<Foreign> p_v);
  TNode<HeapObject> LoadJSNumberFormatBoundFormat(TNode<JSNumberFormat> p_o);
  void StoreJSNumberFormatBoundFormat(TNode<JSNumberFormat> p_o, TNode<HeapObject> p_v);
  TNode<Smi> LoadJSNumberFormatFlags(TNode<JSNumberFormat> p_o);
  void StoreJSNumberFormatFlags(TNode<JSNumberFormat> p_o, TNode<Smi> p_v);
  TNode<String> LoadJSPluralRulesLocale(TNode<JSPluralRules> p_o);
  void StoreJSPluralRulesLocale(TNode<JSPluralRules> p_o, TNode<String> p_v);
  TNode<Smi> LoadJSPluralRulesFlags(TNode<JSPluralRules> p_o);
  void StoreJSPluralRulesFlags(TNode<JSPluralRules> p_o, TNode<Smi> p_v);
  TNode<Foreign> LoadJSPluralRulesIcuPluralRules(TNode<JSPluralRules> p_o);
  void StoreJSPluralRulesIcuPluralRules(TNode<JSPluralRules> p_o, TNode<Foreign> p_v);
  TNode<Foreign> LoadJSPluralRulesIcuNumberFormatter(TNode<JSPluralRules> p_o);
  void StoreJSPluralRulesIcuNumberFormatter(TNode<JSPluralRules> p_o, TNode<Foreign> p_v);
  TNode<String> LoadJSRelativeTimeFormatLocale(TNode<JSRelativeTimeFormat> p_o);
  void StoreJSRelativeTimeFormatLocale(TNode<JSRelativeTimeFormat> p_o, TNode<String> p_v);
  TNode<String> LoadJSRelativeTimeFormatNumberingSystem(TNode<JSRelativeTimeFormat> p_o);
  void StoreJSRelativeTimeFormatNumberingSystem(TNode<JSRelativeTimeFormat> p_o, TNode<String> p_v);
  TNode<Foreign> LoadJSRelativeTimeFormatIcuFormatter(TNode<JSRelativeTimeFormat> p_o);
  void StoreJSRelativeTimeFormatIcuFormatter(TNode<JSRelativeTimeFormat> p_o, TNode<Foreign> p_v);
  TNode<Smi> LoadJSRelativeTimeFormatFlags(TNode<JSRelativeTimeFormat> p_o);
  void StoreJSRelativeTimeFormatFlags(TNode<JSRelativeTimeFormat> p_o, TNode<Smi> p_v);
  TNode<Foreign> LoadJSLocaleIcuLocale(TNode<JSLocale> p_o);
  void StoreJSLocaleIcuLocale(TNode<JSLocale> p_o, TNode<Foreign> p_v);
  TNode<String> LoadJSSegmenterLocale(TNode<JSSegmenter> p_o);
  void StoreJSSegmenterLocale(TNode<JSSegmenter> p_o, TNode<String> p_v);
  TNode<Foreign> LoadJSSegmenterIcuBreakIterator(TNode<JSSegmenter> p_o);
  void StoreJSSegmenterIcuBreakIterator(TNode<JSSegmenter> p_o, TNode<Foreign> p_v);
  TNode<Smi> LoadJSSegmenterFlags(TNode<JSSegmenter> p_o);
  void StoreJSSegmenterFlags(TNode<JSSegmenter> p_o, TNode<Smi> p_v);
  TNode<Foreign> LoadJSSegmentIteratorIcuBreakIterator(TNode<JSSegmentIterator> p_o);
  void StoreJSSegmentIteratorIcuBreakIterator(TNode<JSSegmentIterator> p_o, TNode<Foreign> p_v);
  TNode<Foreign> LoadJSSegmentIteratorUnicodeString(TNode<JSSegmentIterator> p_o);
  void StoreJSSegmentIteratorUnicodeString(TNode<JSSegmentIterator> p_o, TNode<Foreign> p_v);
  TNode<Smi> LoadJSSegmentIteratorFlags(TNode<JSSegmentIterator> p_o);
  void StoreJSSegmentIteratorFlags(TNode<JSSegmentIterator> p_o, TNode<Smi> p_v);
  TNode<String> LoadJSV8BreakIteratorLocale(TNode<JSV8BreakIterator> p_o);
  void StoreJSV8BreakIteratorLocale(TNode<JSV8BreakIterator> p_o, TNode<String> p_v);
  TNode<Foreign> LoadJSV8BreakIteratorBreakIterator(TNode<JSV8BreakIterator> p_o);
  void StoreJSV8BreakIteratorBreakIterator(TNode<JSV8BreakIterator> p_o, TNode<Foreign> p_v);
  TNode<Foreign> LoadJSV8BreakIteratorUnicodeString(TNode<JSV8BreakIterator> p_o);
  void StoreJSV8BreakIteratorUnicodeString(TNode<JSV8BreakIterator> p_o, TNode<Foreign> p_v);
  TNode<HeapObject> LoadJSV8BreakIteratorBoundAdoptText(TNode<JSV8BreakIterator> p_o);
  void StoreJSV8BreakIteratorBoundAdoptText(TNode<JSV8BreakIterator> p_o, TNode<HeapObject> p_v);
  TNode<HeapObject> LoadJSV8BreakIteratorBoundFirst(TNode<JSV8BreakIterator> p_o);
  void StoreJSV8BreakIteratorBoundFirst(TNode<JSV8BreakIterator> p_o, TNode<HeapObject> p_v);
  TNode<HeapObject> LoadJSV8BreakIteratorBoundNext(TNode<JSV8BreakIterator> p_o);
  void StoreJSV8BreakIteratorBoundNext(TNode<JSV8BreakIterator> p_o, TNode<HeapObject> p_v);
  TNode<HeapObject> LoadJSV8BreakIteratorBoundCurrent(TNode<JSV8BreakIterator> p_o);
  void StoreJSV8BreakIteratorBoundCurrent(TNode<JSV8BreakIterator> p_o, TNode<HeapObject> p_v);
  TNode<HeapObject> LoadJSV8BreakIteratorBoundBreakType(TNode<JSV8BreakIterator> p_o);
  void StoreJSV8BreakIteratorBoundBreakType(TNode<JSV8BreakIterator> p_o, TNode<HeapObject> p_v);
  TNode<Smi> LoadJSV8BreakIteratorBreakIteratorType(TNode<JSV8BreakIterator> p_o);
  void StoreJSV8BreakIteratorBreakIteratorType(TNode<JSV8BreakIterator> p_o, TNode<Smi> p_v);
  TNode<Foreign> LoadJSCollatorIcuCollator(TNode<JSCollator> p_o);
  void StoreJSCollatorIcuCollator(TNode<JSCollator> p_o, TNode<Foreign> p_v);
  TNode<HeapObject> LoadJSCollatorBoundCompare(TNode<JSCollator> p_o);
  void StoreJSCollatorBoundCompare(TNode<JSCollator> p_o, TNode<HeapObject> p_v);
  TNode<UintPtrT> LoadJSArrayBufferByteLength(TNode<JSArrayBuffer> p_o);
  void StoreJSArrayBufferByteLength(TNode<JSArrayBuffer> p_o, TNode<UintPtrT> p_v);
  TNode<RawPtrT> LoadJSArrayBufferBackingStore(TNode<JSArrayBuffer> p_o);
  void StoreJSArrayBufferBackingStore(TNode<JSArrayBuffer> p_o, TNode<RawPtrT> p_v);
  TNode<RawPtrT> LoadJSDataViewDataPointer(TNode<JSDataView> p_o);
  void StoreJSDataViewDataPointer(TNode<JSDataView> p_o, TNode<RawPtrT> p_v);
  TNode<JSReceiver> LoadJSArrayIteratorIteratedObject(TNode<JSArrayIterator> p_o);
  void StoreJSArrayIteratorIteratedObject(TNode<JSArrayIterator> p_o, TNode<JSReceiver> p_v);
  TNode<Number> LoadJSArrayIteratorNextIndex(TNode<JSArrayIterator> p_o);
  void StoreJSArrayIteratorNextIndex(TNode<JSArrayIterator> p_o, TNode<Number> p_v);
  TNode<Smi> LoadJSArrayIteratorKind(TNode<JSArrayIterator> p_o);
  void StoreJSArrayIteratorKind(TNode<JSArrayIterator> p_o, TNode<Smi> p_v);
  TNode<Number> LoadJSArrayLength(TNode<JSArray> p_o);
  void StoreJSArrayLength(TNode<JSArray> p_o, TNode<Number> p_v);
  TNode<Object> LoadJSCollectionIteratorTable(TNode<JSCollectionIterator> p_o);
  void StoreJSCollectionIteratorTable(TNode<JSCollectionIterator> p_o, TNode<Object> p_v);
  TNode<Object> LoadJSCollectionIteratorIndex(TNode<JSCollectionIterator> p_o);
  void StoreJSCollectionIteratorIndex(TNode<JSCollectionIterator> p_o, TNode<Object> p_v);
  TNode<Object> LoadJSCollectionTable(TNode<JSCollection> p_o);
  void StoreJSCollectionTable(TNode<JSCollection> p_o, TNode<Object> p_v);
  TNode<Object> LoadJSWeakCollectionTable(TNode<JSWeakCollection> p_o);
  void StoreJSWeakCollectionTable(TNode<JSWeakCollection> p_o, TNode<Object> p_v);
  TNode<JSFunction> LoadJSGeneratorObjectFunction(TNode<JSGeneratorObject> p_o);
  void StoreJSGeneratorObjectFunction(TNode<JSGeneratorObject> p_o, TNode<JSFunction> p_v);
  TNode<Context> LoadJSGeneratorObjectContext(TNode<JSGeneratorObject> p_o);
  void StoreJSGeneratorObjectContext(TNode<JSGeneratorObject> p_o, TNode<Context> p_v);
  TNode<Object> LoadJSGeneratorObjectReceiver(TNode<JSGeneratorObject> p_o);
  void StoreJSGeneratorObjectReceiver(TNode<JSGeneratorObject> p_o, TNode<Object> p_v);
  TNode<Object> LoadJSGeneratorObjectInputOrDebugPos(TNode<JSGeneratorObject> p_o);
  void StoreJSGeneratorObjectInputOrDebugPos(TNode<JSGeneratorObject> p_o, TNode<Object> p_v);
  TNode<Smi> LoadJSGeneratorObjectResumeMode(TNode<JSGeneratorObject> p_o);
  void StoreJSGeneratorObjectResumeMode(TNode<JSGeneratorObject> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadJSGeneratorObjectContinuation(TNode<JSGeneratorObject> p_o);
  void StoreJSGeneratorObjectContinuation(TNode<JSGeneratorObject> p_o, TNode<Smi> p_v);
  TNode<FixedArray> LoadJSGeneratorObjectParametersAndRegisters(TNode<JSGeneratorObject> p_o);
  void StoreJSGeneratorObjectParametersAndRegisters(TNode<JSGeneratorObject> p_o, TNode<FixedArray> p_v);
  TNode<JSPromise> LoadJSAsyncFunctionObjectPromise(TNode<JSAsyncFunctionObject> p_o);
  void StoreJSAsyncFunctionObjectPromise(TNode<JSAsyncFunctionObject> p_o, TNode<JSPromise> p_v);
  TNode<HeapObject> LoadJSAsyncGeneratorObjectQueue(TNode<JSAsyncGeneratorObject> p_o);
  void StoreJSAsyncGeneratorObjectQueue(TNode<JSAsyncGeneratorObject> p_o, TNode<HeapObject> p_v);
  TNode<Smi> LoadJSAsyncGeneratorObjectIsAwaiting(TNode<JSAsyncGeneratorObject> p_o);
  void StoreJSAsyncGeneratorObjectIsAwaiting(TNode<JSAsyncGeneratorObject> p_o, TNode<Smi> p_v);
  TNode<HeapObject> LoadAsyncGeneratorRequestNext(TNode<AsyncGeneratorRequest> p_o);
  void StoreAsyncGeneratorRequestNext(TNode<AsyncGeneratorRequest> p_o, TNode<HeapObject> p_v);
  TNode<Smi> LoadAsyncGeneratorRequestResumeMode(TNode<AsyncGeneratorRequest> p_o);
  void StoreAsyncGeneratorRequestResumeMode(TNode<AsyncGeneratorRequest> p_o, TNode<Smi> p_v);
  TNode<Object> LoadAsyncGeneratorRequestValue(TNode<AsyncGeneratorRequest> p_o);
  void StoreAsyncGeneratorRequestValue(TNode<AsyncGeneratorRequest> p_o, TNode<Object> p_v);
  TNode<JSPromise> LoadAsyncGeneratorRequestPromise(TNode<AsyncGeneratorRequest> p_o);
  void StoreAsyncGeneratorRequestPromise(TNode<AsyncGeneratorRequest> p_o, TNode<JSPromise> p_v);
  TNode<Object> LoadJSGlobalProxyNativeContext(TNode<JSGlobalProxy> p_o);
  void StoreJSGlobalProxyNativeContext(TNode<JSGlobalProxy> p_o, TNode<Object> p_v);
  TNode<NativeContext> LoadJSGlobalObjectNativeContext(TNode<JSGlobalObject> p_o);
  void StoreJSGlobalObjectNativeContext(TNode<JSGlobalObject> p_o, TNode<NativeContext> p_v);
  TNode<JSGlobalProxy> LoadJSGlobalObjectGlobalProxy(TNode<JSGlobalObject> p_o);
  void StoreJSGlobalObjectGlobalProxy(TNode<JSGlobalObject> p_o, TNode<JSGlobalProxy> p_v);
  TNode<Object> LoadJSPrimitiveWrapperValue(TNode<JSPrimitiveWrapper> p_o);
  void StoreJSPrimitiveWrapperValue(TNode<JSPrimitiveWrapper> p_o, TNode<Object> p_v);
  TNode<Smi> LoadJSMessageObjectMessageType(TNode<JSMessageObject> p_o);
  void StoreJSMessageObjectMessageType(TNode<JSMessageObject> p_o, TNode<Smi> p_v);
  TNode<Object> LoadJSMessageObjectArguments(TNode<JSMessageObject> p_o);
  void StoreJSMessageObjectArguments(TNode<JSMessageObject> p_o, TNode<Object> p_v);
  TNode<Script> LoadJSMessageObjectScript(TNode<JSMessageObject> p_o);
  void StoreJSMessageObjectScript(TNode<JSMessageObject> p_o, TNode<Script> p_v);
  TNode<Object> LoadJSMessageObjectStackFrames(TNode<JSMessageObject> p_o);
  void StoreJSMessageObjectStackFrames(TNode<JSMessageObject> p_o, TNode<Object> p_v);
  TNode<HeapObject> LoadJSMessageObjectSharedInfo(TNode<JSMessageObject> p_o);
  void StoreJSMessageObjectSharedInfo(TNode<JSMessageObject> p_o, TNode<HeapObject> p_v);
  TNode<Smi> LoadJSMessageObjectBytecodeOffset(TNode<JSMessageObject> p_o);
  void StoreJSMessageObjectBytecodeOffset(TNode<JSMessageObject> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadJSMessageObjectStartPosition(TNode<JSMessageObject> p_o);
  void StoreJSMessageObjectStartPosition(TNode<JSMessageObject> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadJSMessageObjectEndPosition(TNode<JSMessageObject> p_o);
  void StoreJSMessageObjectEndPosition(TNode<JSMessageObject> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadJSMessageObjectErrorLevel(TNode<JSMessageObject> p_o);
  void StoreJSMessageObjectErrorLevel(TNode<JSMessageObject> p_o, TNode<Smi> p_v);
  TNode<Object> LoadJSDateValue(TNode<JSDate> p_o);
  void StoreJSDateValue(TNode<JSDate> p_o, TNode<Object> p_v);
  TNode<Object> LoadJSDateYear(TNode<JSDate> p_o);
  void StoreJSDateYear(TNode<JSDate> p_o, TNode<Object> p_v);
  TNode<Object> LoadJSDateMonth(TNode<JSDate> p_o);
  void StoreJSDateMonth(TNode<JSDate> p_o, TNode<Object> p_v);
  TNode<Object> LoadJSDateDay(TNode<JSDate> p_o);
  void StoreJSDateDay(TNode<JSDate> p_o, TNode<Object> p_v);
  TNode<Object> LoadJSDateWeekday(TNode<JSDate> p_o);
  void StoreJSDateWeekday(TNode<JSDate> p_o, TNode<Object> p_v);
  TNode<Object> LoadJSDateHour(TNode<JSDate> p_o);
  void StoreJSDateHour(TNode<JSDate> p_o, TNode<Object> p_v);
  TNode<Object> LoadJSDateMin(TNode<JSDate> p_o);
  void StoreJSDateMin(TNode<JSDate> p_o, TNode<Object> p_v);
  TNode<Object> LoadJSDateSec(TNode<JSDate> p_o);
  void StoreJSDateSec(TNode<JSDate> p_o, TNode<Object> p_v);
  TNode<Object> LoadJSDateCacheStamp(TNode<JSDate> p_o);
  void StoreJSDateCacheStamp(TNode<JSDate> p_o, TNode<Object> p_v);
  TNode<JSReceiver> LoadJSAsyncFromSyncIteratorSyncIterator(TNode<JSAsyncFromSyncIterator> p_o);
  void StoreJSAsyncFromSyncIteratorSyncIterator(TNode<JSAsyncFromSyncIterator> p_o, TNode<JSReceiver> p_v);
  TNode<Object> LoadJSAsyncFromSyncIteratorNext(TNode<JSAsyncFromSyncIterator> p_o);
  void StoreJSAsyncFromSyncIteratorNext(TNode<JSAsyncFromSyncIterator> p_o, TNode<Object> p_v);
  TNode<String> LoadJSStringIteratorString(TNode<JSStringIterator> p_o);
  void StoreJSStringIteratorString(TNode<JSStringIterator> p_o, TNode<String> p_v);
  TNode<Smi> LoadJSStringIteratorIndex(TNode<JSStringIterator> p_o);
  void StoreJSStringIteratorIndex(TNode<JSStringIterator> p_o, TNode<Smi> p_v);
  TNode<Object> LoadJSPromiseReactionsOrResult(TNode<JSPromise> p_o);
  void StoreJSPromiseReactionsOrResult(TNode<JSPromise> p_o, TNode<Object> p_v);
  TNode<Smi> LoadJSPromiseFlags(TNode<JSPromise> p_o);
  void StoreJSPromiseFlags(TNode<JSPromise> p_o, TNode<Smi> p_v);
  TNode<Object> LoadJSProxyRevocableResultProxy(TNode<JSObject> p_o);
  void StoreJSProxyRevocableResultProxy(TNode<JSObject> p_o, TNode<Object> p_v);
  TNode<Object> LoadJSProxyRevocableResultRevoke(TNode<JSObject> p_o);
  void StoreJSProxyRevocableResultRevoke(TNode<JSObject> p_o, TNode<Object> p_v);
  TNode<JSReceiver> LoadJSRegExpStringIteratorIteratingRegExp(TNode<JSRegExpStringIterator> p_o);
  void StoreJSRegExpStringIteratorIteratingRegExp(TNode<JSRegExpStringIterator> p_o, TNode<JSReceiver> p_v);
  TNode<String> LoadJSRegExpStringIteratorIteratedString(TNode<JSRegExpStringIterator> p_o);
  void StoreJSRegExpStringIteratorIteratedString(TNode<JSRegExpStringIterator> p_o, TNode<String> p_v);
  TNode<Smi> LoadJSRegExpStringIteratorFlags(TNode<JSRegExpStringIterator> p_o);
  void StoreJSRegExpStringIteratorFlags(TNode<JSRegExpStringIterator> p_o, TNode<Smi> p_v);
  TNode<HeapObject> LoadJSRegExpData(TNode<JSRegExp> p_o);
  void StoreJSRegExpData(TNode<JSRegExp> p_o, TNode<HeapObject> p_v);
  TNode<PrimitiveHeapObject> LoadJSRegExpSource(TNode<JSRegExp> p_o);
  void StoreJSRegExpSource(TNode<JSRegExp> p_o, TNode<PrimitiveHeapObject> p_v);
  TNode<Object> LoadJSRegExpFlags(TNode<JSRegExp> p_o);
  void StoreJSRegExpFlags(TNode<JSRegExp> p_o, TNode<Object> p_v);
  TNode<Object> LoadJSRegExpResultIndex(TNode<JSArray> p_o);
  void StoreJSRegExpResultIndex(TNode<JSArray> p_o, TNode<Object> p_v);
  TNode<Object> LoadJSRegExpResultInput(TNode<JSArray> p_o);
  void StoreJSRegExpResultInput(TNode<JSArray> p_o, TNode<Object> p_v);
  TNode<Object> LoadJSRegExpResultGroups(TNode<JSArray> p_o);
  void StoreJSRegExpResultGroups(TNode<JSArray> p_o, TNode<Object> p_v);
  TNode<JSObject> LoadJSRegExpResultCachedIndicesOrRegexp(TNode<JSArray> p_o);
  void StoreJSRegExpResultCachedIndicesOrRegexp(TNode<JSArray> p_o, TNode<JSObject> p_v);
  TNode<HeapObject> LoadJSRegExpResultNames(TNode<JSArray> p_o);
  void StoreJSRegExpResultNames(TNode<JSArray> p_o, TNode<HeapObject> p_v);
  TNode<String> LoadJSRegExpResultRegexpInput(TNode<JSArray> p_o);
  void StoreJSRegExpResultRegexpInput(TNode<JSArray> p_o, TNode<String> p_v);
  TNode<Smi> LoadJSRegExpResultRegexpLastIndex(TNode<JSArray> p_o);
  void StoreJSRegExpResultRegexpLastIndex(TNode<JSArray> p_o, TNode<Smi> p_v);
  TNode<Object> LoadJSRegExpResultIndicesGroups(TNode<JSArray> p_o);
  void StoreJSRegExpResultIndicesGroups(TNode<JSArray> p_o, TNode<Object> p_v);
  TNode<NativeContext> LoadJSFinalizationGroupNativeContext(TNode<JSFinalizationGroup> p_o);
  void StoreJSFinalizationGroupNativeContext(TNode<JSFinalizationGroup> p_o, TNode<NativeContext> p_v);
  TNode<Object> LoadJSFinalizationGroupCleanup(TNode<JSFinalizationGroup> p_o);
  void StoreJSFinalizationGroupCleanup(TNode<JSFinalizationGroup> p_o, TNode<Object> p_v);
  TNode<HeapObject> LoadJSFinalizationGroupActiveCells(TNode<JSFinalizationGroup> p_o);
  void StoreJSFinalizationGroupActiveCells(TNode<JSFinalizationGroup> p_o, TNode<HeapObject> p_v);
  TNode<HeapObject> LoadJSFinalizationGroupClearedCells(TNode<JSFinalizationGroup> p_o);
  void StoreJSFinalizationGroupClearedCells(TNode<JSFinalizationGroup> p_o, TNode<HeapObject> p_v);
  TNode<Object> LoadJSFinalizationGroupKeyMap(TNode<JSFinalizationGroup> p_o);
  void StoreJSFinalizationGroupKeyMap(TNode<JSFinalizationGroup> p_o, TNode<Object> p_v);
  TNode<HeapObject> LoadJSFinalizationGroupNext(TNode<JSFinalizationGroup> p_o);
  void StoreJSFinalizationGroupNext(TNode<JSFinalizationGroup> p_o, TNode<HeapObject> p_v);
  TNode<Smi> LoadJSFinalizationGroupFlags(TNode<JSFinalizationGroup> p_o);
  void StoreJSFinalizationGroupFlags(TNode<JSFinalizationGroup> p_o, TNode<Smi> p_v);
  TNode<JSFinalizationGroup> LoadJSFinalizationGroupCleanupIteratorFinalizationGroup(TNode<JSFinalizationGroupCleanupIterator> p_o);
  void StoreJSFinalizationGroupCleanupIteratorFinalizationGroup(TNode<JSFinalizationGroupCleanupIterator> p_o, TNode<JSFinalizationGroup> p_v);
  TNode<HeapObject> LoadWeakCellFinalizationGroup(TNode<WeakCell> p_o);
  void StoreWeakCellFinalizationGroup(TNode<WeakCell> p_o, TNode<HeapObject> p_v);
  TNode<HeapObject> LoadWeakCellTarget(TNode<WeakCell> p_o);
  void StoreWeakCellTarget(TNode<WeakCell> p_o, TNode<HeapObject> p_v);
  TNode<Object> LoadWeakCellHoldings(TNode<WeakCell> p_o);
  void StoreWeakCellHoldings(TNode<WeakCell> p_o, TNode<Object> p_v);
  TNode<HeapObject> LoadWeakCellPrev(TNode<WeakCell> p_o);
  void StoreWeakCellPrev(TNode<WeakCell> p_o, TNode<HeapObject> p_v);
  TNode<HeapObject> LoadWeakCellNext(TNode<WeakCell> p_o);
  void StoreWeakCellNext(TNode<WeakCell> p_o, TNode<HeapObject> p_v);
  TNode<Object> LoadWeakCellKey(TNode<WeakCell> p_o);
  void StoreWeakCellKey(TNode<WeakCell> p_o, TNode<Object> p_v);
  TNode<HeapObject> LoadWeakCellKeyListPrev(TNode<WeakCell> p_o);
  void StoreWeakCellKeyListPrev(TNode<WeakCell> p_o, TNode<HeapObject> p_v);
  TNode<HeapObject> LoadWeakCellKeyListNext(TNode<WeakCell> p_o);
  void StoreWeakCellKeyListNext(TNode<WeakCell> p_o, TNode<HeapObject> p_v);
  TNode<HeapObject> LoadJSWeakRefTarget(TNode<JSWeakRef> p_o);
  void StoreJSWeakRefTarget(TNode<JSWeakRef> p_o, TNode<HeapObject> p_v);
  TNode<Smi> LoadArrayBoilerplateDescriptionFlags(TNode<ArrayBoilerplateDescription> p_o);
  void StoreArrayBoilerplateDescriptionFlags(TNode<ArrayBoilerplateDescription> p_o, TNode<Smi> p_v);
  TNode<FixedArrayBase> LoadArrayBoilerplateDescriptionConstantElements(TNode<ArrayBoilerplateDescription> p_o);
  void StoreArrayBoilerplateDescriptionConstantElements(TNode<ArrayBoilerplateDescription> p_o, TNode<FixedArrayBase> p_v);
  TNode<Foreign> LoadCallbackTaskCallback(TNode<CallbackTask> p_o);
  void StoreCallbackTaskCallback(TNode<CallbackTask> p_o, TNode<Foreign> p_v);
  TNode<Foreign> LoadCallbackTaskData(TNode<CallbackTask> p_o);
  void StoreCallbackTaskData(TNode<CallbackTask> p_o, TNode<Foreign> p_v);
  TNode<JSReceiver> LoadCallableTaskCallable(TNode<CallableTask> p_o);
  void StoreCallableTaskCallable(TNode<CallableTask> p_o, TNode<JSReceiver> p_v);
  TNode<Context> LoadCallableTaskContext(TNode<CallableTask> p_o);
  void StoreCallableTaskContext(TNode<CallableTask> p_o, TNode<Context> p_v);
  TNode<ObjectHashTable> LoadModuleExports(TNode<Module> p_o);
  void StoreModuleExports(TNode<Module> p_o, TNode<ObjectHashTable> p_v);
  TNode<Smi> LoadModuleHash(TNode<Module> p_o);
  void StoreModuleHash(TNode<Module> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadModuleStatus(TNode<Module> p_o);
  void StoreModuleStatus(TNode<Module> p_o, TNode<Smi> p_v);
  TNode<HeapObject> LoadModuleModuleNamespace(TNode<Module> p_o);
  void StoreModuleModuleNamespace(TNode<Module> p_o, TNode<HeapObject> p_v);
  TNode<Object> LoadModuleException(TNode<Module> p_o);
  void StoreModuleException(TNode<Module> p_o, TNode<Object> p_v);
  TNode<Module> LoadJSModuleNamespaceModule(TNode<JSModuleNamespace> p_o);
  void StoreJSModuleNamespaceModule(TNode<JSModuleNamespace> p_o, TNode<Module> p_v);
  TNode<HeapObject> LoadPromiseCapabilityPromise(TNode<PromiseCapability> p_o);
  void StorePromiseCapabilityPromise(TNode<PromiseCapability> p_o, TNode<HeapObject> p_v);
  TNode<Object> LoadPromiseCapabilityResolve(TNode<PromiseCapability> p_o);
  void StorePromiseCapabilityResolve(TNode<PromiseCapability> p_o, TNode<Object> p_v);
  TNode<Object> LoadPromiseCapabilityReject(TNode<PromiseCapability> p_o);
  void StorePromiseCapabilityReject(TNode<PromiseCapability> p_o, TNode<Object> p_v);
  TNode<Object> LoadPromiseReactionNext(TNode<PromiseReaction> p_o);
  void StorePromiseReactionNext(TNode<PromiseReaction> p_o, TNode<Object> p_v);
  TNode<HeapObject> LoadPromiseReactionRejectHandler(TNode<PromiseReaction> p_o);
  void StorePromiseReactionRejectHandler(TNode<PromiseReaction> p_o, TNode<HeapObject> p_v);
  TNode<HeapObject> LoadPromiseReactionFulfillHandler(TNode<PromiseReaction> p_o);
  void StorePromiseReactionFulfillHandler(TNode<PromiseReaction> p_o, TNode<HeapObject> p_v);
  TNode<HeapObject> LoadPromiseReactionPromiseOrCapability(TNode<PromiseReaction> p_o);
  void StorePromiseReactionPromiseOrCapability(TNode<PromiseReaction> p_o, TNode<HeapObject> p_v);
  TNode<Object> LoadPromiseReactionJobTaskArgument(TNode<PromiseReactionJobTask> p_o);
  void StorePromiseReactionJobTaskArgument(TNode<PromiseReactionJobTask> p_o, TNode<Object> p_v);
  TNode<Context> LoadPromiseReactionJobTaskContext(TNode<PromiseReactionJobTask> p_o);
  void StorePromiseReactionJobTaskContext(TNode<PromiseReactionJobTask> p_o, TNode<Context> p_v);
  TNode<HeapObject> LoadPromiseReactionJobTaskHandler(TNode<PromiseReactionJobTask> p_o);
  void StorePromiseReactionJobTaskHandler(TNode<PromiseReactionJobTask> p_o, TNode<HeapObject> p_v);
  TNode<HeapObject> LoadPromiseReactionJobTaskPromiseOrCapability(TNode<PromiseReactionJobTask> p_o);
  void StorePromiseReactionJobTaskPromiseOrCapability(TNode<PromiseReactionJobTask> p_o, TNode<HeapObject> p_v);
  TNode<Context> LoadPromiseResolveThenableJobTaskContext(TNode<PromiseResolveThenableJobTask> p_o);
  void StorePromiseResolveThenableJobTaskContext(TNode<PromiseResolveThenableJobTask> p_o, TNode<Context> p_v);
  TNode<JSPromise> LoadPromiseResolveThenableJobTaskPromiseToResolve(TNode<PromiseResolveThenableJobTask> p_o);
  void StorePromiseResolveThenableJobTaskPromiseToResolve(TNode<PromiseResolveThenableJobTask> p_o, TNode<JSPromise> p_v);
  TNode<JSReceiver> LoadPromiseResolveThenableJobTaskThen(TNode<PromiseResolveThenableJobTask> p_o);
  void StorePromiseResolveThenableJobTaskThen(TNode<PromiseResolveThenableJobTask> p_o, TNode<JSReceiver> p_v);
  TNode<JSReceiver> LoadPromiseResolveThenableJobTaskThenable(TNode<PromiseResolveThenableJobTask> p_o);
  void StorePromiseResolveThenableJobTaskThenable(TNode<PromiseResolveThenableJobTask> p_o, TNode<JSReceiver> p_v);
  TNode<Smi> LoadPropertyArrayLengthAndHash(TNode<PropertyArray> p_o);
  void StorePropertyArrayLengthAndHash(TNode<PropertyArray> p_o, TNode<Smi> p_v);
  TNode<Name> LoadPropertyCellName(TNode<PropertyCell> p_o);
  void StorePropertyCellName(TNode<PropertyCell> p_o, TNode<Name> p_v);
  TNode<Smi> LoadPropertyCellPropertyDetailsRaw(TNode<PropertyCell> p_o);
  void StorePropertyCellPropertyDetailsRaw(TNode<PropertyCell> p_o, TNode<Smi> p_v);
  TNode<Object> LoadPropertyCellValue(TNode<PropertyCell> p_o);
  void StorePropertyCellValue(TNode<PropertyCell> p_o, TNode<Object> p_v);
  TNode<WeakFixedArray> LoadPropertyCellDependentCode(TNode<PropertyCell> p_o);
  void StorePropertyCellDependentCode(TNode<PropertyCell> p_o, TNode<WeakFixedArray> p_v);
  TNode<HeapObject> LoadPrototypeInfoJsModuleNamespace(TNode<PrototypeInfo> p_o);
  void StorePrototypeInfoJsModuleNamespace(TNode<PrototypeInfo> p_o, TNode<HeapObject> p_v);
  TNode<Object> LoadPrototypeInfoPrototypeUsers(TNode<PrototypeInfo> p_o);
  void StorePrototypeInfoPrototypeUsers(TNode<PrototypeInfo> p_o, TNode<Object> p_v);
  TNode<Smi> LoadPrototypeInfoRegistrySlot(TNode<PrototypeInfo> p_o);
  void StorePrototypeInfoRegistrySlot(TNode<PrototypeInfo> p_o, TNode<Smi> p_v);
  TNode<Object> LoadPrototypeInfoValidityCell(TNode<PrototypeInfo> p_o);
  void StorePrototypeInfoValidityCell(TNode<PrototypeInfo> p_o, TNode<Object> p_v);
  TNode<MaybeObject> LoadPrototypeInfoObjectCreateMap(TNode<PrototypeInfo> p_o);
  void StorePrototypeInfoObjectCreateMap(TNode<PrototypeInfo> p_o, TNode<MaybeObject> p_v);
  TNode<Smi> LoadPrototypeInfoBitField(TNode<PrototypeInfo> p_o);
  void StorePrototypeInfoBitField(TNode<PrototypeInfo> p_o, TNode<Smi> p_v);
  TNode<Object> LoadScriptSource(TNode<Script> p_o);
  void StoreScriptSource(TNode<Script> p_o, TNode<Object> p_v);
  TNode<Object> LoadScriptName(TNode<Script> p_o);
  void StoreScriptName(TNode<Script> p_o, TNode<Object> p_v);
  TNode<Smi> LoadScriptLineOffset(TNode<Script> p_o);
  void StoreScriptLineOffset(TNode<Script> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadScriptColumnOffset(TNode<Script> p_o);
  void StoreScriptColumnOffset(TNode<Script> p_o, TNode<Smi> p_v);
  TNode<Object> LoadScriptContext(TNode<Script> p_o);
  void StoreScriptContext(TNode<Script> p_o, TNode<Object> p_v);
  TNode<Smi> LoadScriptScriptType(TNode<Script> p_o);
  void StoreScriptScriptType(TNode<Script> p_o, TNode<Smi> p_v);
  TNode<Object> LoadScriptLineEnds(TNode<Script> p_o);
  void StoreScriptLineEnds(TNode<Script> p_o, TNode<Object> p_v);
  TNode<Smi> LoadScriptId(TNode<Script> p_o);
  void StoreScriptId(TNode<Script> p_o, TNode<Smi> p_v);
  TNode<Object> LoadScriptEvalFromSharedOrWrappedArguments(TNode<Script> p_o);
  void StoreScriptEvalFromSharedOrWrappedArguments(TNode<Script> p_o, TNode<Object> p_v);
  TNode<Object> LoadScriptEvalFromPosition(TNode<Script> p_o);
  void StoreScriptEvalFromPosition(TNode<Script> p_o, TNode<Object> p_v);
  TNode<Object> LoadScriptSharedFunctionInfos(TNode<Script> p_o);
  void StoreScriptSharedFunctionInfos(TNode<Script> p_o, TNode<Object> p_v);
  TNode<Smi> LoadScriptFlags(TNode<Script> p_o);
  void StoreScriptFlags(TNode<Script> p_o, TNode<Smi> p_v);
  TNode<Object> LoadScriptSourceUrl(TNode<Script> p_o);
  void StoreScriptSourceUrl(TNode<Script> p_o, TNode<Object> p_v);
  TNode<Object> LoadScriptSourceMappingUrl(TNode<Script> p_o);
  void StoreScriptSourceMappingUrl(TNode<Script> p_o, TNode<Object> p_v);
  TNode<Object> LoadScriptHostDefinedOptions(TNode<Script> p_o);
  void StoreScriptHostDefinedOptions(TNode<Script> p_o, TNode<Object> p_v);
  TNode<Int32T> LoadPreparseDataDataLength(TNode<PreparseData> p_o);
  void StorePreparseDataDataLength(TNode<PreparseData> p_o, TNode<Int32T> p_v);
  TNode<Int32T> LoadPreparseDataChildrenLength(TNode<PreparseData> p_o);
  void StorePreparseDataChildrenLength(TNode<PreparseData> p_o, TNode<Int32T> p_v);
  TNode<BytecodeArray> LoadInterpreterDataBytecodeArray(TNode<InterpreterData> p_o);
  void StoreInterpreterDataBytecodeArray(TNode<InterpreterData> p_o, TNode<BytecodeArray> p_v);
  TNode<Code> LoadInterpreterDataInterpreterTrampoline(TNode<InterpreterData> p_o);
  void StoreInterpreterDataInterpreterTrampoline(TNode<InterpreterData> p_o, TNode<Code> p_v);
  TNode<Object> LoadSharedFunctionInfoFunctionData(TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoFunctionData(TNode<SharedFunctionInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadSharedFunctionInfoNameOrScopeInfo(TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoNameOrScopeInfo(TNode<SharedFunctionInfo> p_o, TNode<Object> p_v);
  TNode<HeapObject> LoadSharedFunctionInfoOuterScopeInfoOrFeedbackMetadata(TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoOuterScopeInfoOrFeedbackMetadata(TNode<SharedFunctionInfo> p_o, TNode<HeapObject> p_v);
  TNode<HeapObject> LoadSharedFunctionInfoScriptOrDebugInfo(TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoScriptOrDebugInfo(TNode<SharedFunctionInfo> p_o, TNode<HeapObject> p_v);
  TNode<Int16T> LoadSharedFunctionInfoLength(TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoLength(TNode<SharedFunctionInfo> p_o, TNode<Int16T> p_v);
  TNode<Uint16T> LoadSharedFunctionInfoFormalParameterCount(TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoFormalParameterCount(TNode<SharedFunctionInfo> p_o, TNode<Uint16T> p_v);
  TNode<Uint16T> LoadSharedFunctionInfoExpectedNofProperties(TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoExpectedNofProperties(TNode<SharedFunctionInfo> p_o, TNode<Uint16T> p_v);
  TNode<Int16T> LoadSharedFunctionInfoFunctionTokenOffset(TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoFunctionTokenOffset(TNode<SharedFunctionInfo> p_o, TNode<Int16T> p_v);
  TNode<Int32T> LoadSharedFunctionInfoFlags(TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoFlags(TNode<SharedFunctionInfo> p_o, TNode<Int32T> p_v);
  TNode<Int32T> LoadSharedFunctionInfoFunctionLiteralId(TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoFunctionLiteralId(TNode<SharedFunctionInfo> p_o, TNode<Int32T> p_v);
  TNode<String> LoadUncompiledDataInferredName(TNode<UncompiledData> p_o);
  void StoreUncompiledDataInferredName(TNode<UncompiledData> p_o, TNode<String> p_v);
  TNode<Int32T> LoadUncompiledDataStartPosition(TNode<UncompiledData> p_o);
  void StoreUncompiledDataStartPosition(TNode<UncompiledData> p_o, TNode<Int32T> p_v);
  TNode<Int32T> LoadUncompiledDataEndPosition(TNode<UncompiledData> p_o);
  void StoreUncompiledDataEndPosition(TNode<UncompiledData> p_o, TNode<Int32T> p_v);
  TNode<PreparseData> LoadUncompiledDataWithPreparseDataPreparseData(TNode<UncompiledDataWithPreparseData> p_o);
  void StoreUncompiledDataWithPreparseDataPreparseData(TNode<UncompiledDataWithPreparseData> p_o, TNode<PreparseData> p_v);
  TNode<HeapObject> LoadSourceTextModuleCode(TNode<SourceTextModule> p_o);
  void StoreSourceTextModuleCode(TNode<SourceTextModule> p_o, TNode<HeapObject> p_v);
  TNode<FixedArray> LoadSourceTextModuleRegularExports(TNode<SourceTextModule> p_o);
  void StoreSourceTextModuleRegularExports(TNode<SourceTextModule> p_o, TNode<FixedArray> p_v);
  TNode<FixedArray> LoadSourceTextModuleRegularImports(TNode<SourceTextModule> p_o);
  void StoreSourceTextModuleRegularImports(TNode<SourceTextModule> p_o, TNode<FixedArray> p_v);
  TNode<FixedArray> LoadSourceTextModuleRequestedModules(TNode<SourceTextModule> p_o);
  void StoreSourceTextModuleRequestedModules(TNode<SourceTextModule> p_o, TNode<FixedArray> p_v);
  TNode<Script> LoadSourceTextModuleScript(TNode<SourceTextModule> p_o);
  void StoreSourceTextModuleScript(TNode<SourceTextModule> p_o, TNode<Script> p_v);
  TNode<HeapObject> LoadSourceTextModuleImportMeta(TNode<SourceTextModule> p_o);
  void StoreSourceTextModuleImportMeta(TNode<SourceTextModule> p_o, TNode<HeapObject> p_v);
  TNode<ArrayList> LoadSourceTextModuleAsyncParentModules(TNode<SourceTextModule> p_o);
  void StoreSourceTextModuleAsyncParentModules(TNode<SourceTextModule> p_o, TNode<ArrayList> p_v);
  TNode<HeapObject> LoadSourceTextModuleTopLevelCapability(TNode<SourceTextModule> p_o);
  void StoreSourceTextModuleTopLevelCapability(TNode<SourceTextModule> p_o, TNode<HeapObject> p_v);
  TNode<Smi> LoadSourceTextModuleDfsIndex(TNode<SourceTextModule> p_o);
  void StoreSourceTextModuleDfsIndex(TNode<SourceTextModule> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadSourceTextModuleDfsAncestorIndex(TNode<SourceTextModule> p_o);
  void StoreSourceTextModuleDfsAncestorIndex(TNode<SourceTextModule> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadSourceTextModulePendingAsyncDependencies(TNode<SourceTextModule> p_o);
  void StoreSourceTextModulePendingAsyncDependencies(TNode<SourceTextModule> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadSourceTextModuleFlags(TNode<SourceTextModule> p_o);
  void StoreSourceTextModuleFlags(TNode<SourceTextModule> p_o, TNode<Smi> p_v);
  TNode<PrimitiveHeapObject> LoadSourceTextModuleInfoEntryExportName(TNode<SourceTextModuleInfoEntry> p_o);
  void StoreSourceTextModuleInfoEntryExportName(TNode<SourceTextModuleInfoEntry> p_o, TNode<PrimitiveHeapObject> p_v);
  TNode<PrimitiveHeapObject> LoadSourceTextModuleInfoEntryLocalName(TNode<SourceTextModuleInfoEntry> p_o);
  void StoreSourceTextModuleInfoEntryLocalName(TNode<SourceTextModuleInfoEntry> p_o, TNode<PrimitiveHeapObject> p_v);
  TNode<PrimitiveHeapObject> LoadSourceTextModuleInfoEntryImportName(TNode<SourceTextModuleInfoEntry> p_o);
  void StoreSourceTextModuleInfoEntryImportName(TNode<SourceTextModuleInfoEntry> p_o, TNode<PrimitiveHeapObject> p_v);
  TNode<Smi> LoadSourceTextModuleInfoEntryModuleRequest(TNode<SourceTextModuleInfoEntry> p_o);
  void StoreSourceTextModuleInfoEntryModuleRequest(TNode<SourceTextModuleInfoEntry> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadSourceTextModuleInfoEntryCellIndex(TNode<SourceTextModuleInfoEntry> p_o);
  void StoreSourceTextModuleInfoEntryCellIndex(TNode<SourceTextModuleInfoEntry> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadSourceTextModuleInfoEntryBegPos(TNode<SourceTextModuleInfoEntry> p_o);
  void StoreSourceTextModuleInfoEntryBegPos(TNode<SourceTextModuleInfoEntry> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadSourceTextModuleInfoEntryEndPos(TNode<SourceTextModuleInfoEntry> p_o);
  void StoreSourceTextModuleInfoEntryEndPos(TNode<SourceTextModuleInfoEntry> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadStackFrameInfoLineNumber(TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoLineNumber(TNode<StackFrameInfo> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadStackFrameInfoColumnNumber(TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoColumnNumber(TNode<StackFrameInfo> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadStackFrameInfoPromiseAllIndex(TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoPromiseAllIndex(TNode<StackFrameInfo> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadStackFrameInfoScriptId(TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoScriptId(TNode<StackFrameInfo> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadStackFrameInfoWasmFunctionIndex(TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoWasmFunctionIndex(TNode<StackFrameInfo> p_o, TNode<Smi> p_v);
  TNode<PrimitiveHeapObject> LoadStackFrameInfoScriptName(TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoScriptName(TNode<StackFrameInfo> p_o, TNode<PrimitiveHeapObject> p_v);
  TNode<PrimitiveHeapObject> LoadStackFrameInfoScriptNameOrSourceUrl(TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoScriptNameOrSourceUrl(TNode<StackFrameInfo> p_o, TNode<PrimitiveHeapObject> p_v);
  TNode<PrimitiveHeapObject> LoadStackFrameInfoFunctionName(TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoFunctionName(TNode<StackFrameInfo> p_o, TNode<PrimitiveHeapObject> p_v);
  TNode<PrimitiveHeapObject> LoadStackFrameInfoMethodName(TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoMethodName(TNode<StackFrameInfo> p_o, TNode<PrimitiveHeapObject> p_v);
  TNode<PrimitiveHeapObject> LoadStackFrameInfoTypeName(TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoTypeName(TNode<StackFrameInfo> p_o, TNode<PrimitiveHeapObject> p_v);
  TNode<PrimitiveHeapObject> LoadStackFrameInfoEvalOrigin(TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoEvalOrigin(TNode<StackFrameInfo> p_o, TNode<PrimitiveHeapObject> p_v);
  TNode<PrimitiveHeapObject> LoadStackFrameInfoWasmModuleName(TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoWasmModuleName(TNode<StackFrameInfo> p_o, TNode<PrimitiveHeapObject> p_v);
  TNode<HeapObject> LoadStackFrameInfoWasmInstance(TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoWasmInstance(TNode<StackFrameInfo> p_o, TNode<HeapObject> p_v);
  TNode<Smi> LoadStackFrameInfoFlag(TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoFlag(TNode<StackFrameInfo> p_o, TNode<Smi> p_v);
  TNode<HeapObject> LoadStackTraceFrameFrameArray(TNode<StackTraceFrame> p_o);
  void StoreStackTraceFrameFrameArray(TNode<StackTraceFrame> p_o, TNode<HeapObject> p_v);
  TNode<Smi> LoadStackTraceFrameFrameIndex(TNode<StackTraceFrame> p_o);
  void StoreStackTraceFrameFrameIndex(TNode<StackTraceFrame> p_o, TNode<Smi> p_v);
  TNode<HeapObject> LoadStackTraceFrameFrameInfo(TNode<StackTraceFrame> p_o);
  void StoreStackTraceFrameFrameInfo(TNode<StackTraceFrame> p_o, TNode<HeapObject> p_v);
  TNode<Smi> LoadStackTraceFrameId(TNode<StackTraceFrame> p_o);
  void StoreStackTraceFrameId(TNode<StackTraceFrame> p_o, TNode<Smi> p_v);
  TNode<String> LoadConsStringFirst(TNode<ConsString> p_o);
  void StoreConsStringFirst(TNode<ConsString> p_o, TNode<String> p_v);
  TNode<String> LoadConsStringSecond(TNode<ConsString> p_o);
  void StoreConsStringSecond(TNode<ConsString> p_o, TNode<String> p_v);
  TNode<RawPtrT> LoadExternalStringResource(TNode<ExternalString> p_o);
  void StoreExternalStringResource(TNode<ExternalString> p_o, TNode<RawPtrT> p_v);
  TNode<RawPtrT> LoadExternalStringResourceData(TNode<ExternalString> p_o);
  void StoreExternalStringResourceData(TNode<ExternalString> p_o, TNode<RawPtrT> p_v);
  TNode<String> LoadSlicedStringParent(TNode<SlicedString> p_o);
  void StoreSlicedStringParent(TNode<SlicedString> p_o, TNode<String> p_v);
  TNode<Smi> LoadSlicedStringOffset(TNode<SlicedString> p_o);
  void StoreSlicedStringOffset(TNode<SlicedString> p_o, TNode<Smi> p_v);
  TNode<String> LoadThinStringActual(TNode<ThinString> p_o);
  void StoreThinStringActual(TNode<ThinString> p_o, TNode<String> p_v);
  TNode<Object> LoadTuple3Value1(TNode<Tuple3> p_o);
  void StoreTuple3Value1(TNode<Tuple3> p_o, TNode<Object> p_v);
  TNode<Object> LoadTuple3Value2(TNode<Tuple3> p_o);
  void StoreTuple3Value2(TNode<Tuple3> p_o, TNode<Object> p_v);
  TNode<Object> LoadTuple3Value3(TNode<Tuple3> p_o);
  void StoreTuple3Value3(TNode<Tuple3> p_o, TNode<Object> p_v);
  TNode<String> LoadSyntheticModuleName(TNode<SyntheticModule> p_o);
  void StoreSyntheticModuleName(TNode<SyntheticModule> p_o, TNode<String> p_v);
  TNode<FixedArray> LoadSyntheticModuleExportNames(TNode<SyntheticModule> p_o);
  void StoreSyntheticModuleExportNames(TNode<SyntheticModule> p_o, TNode<FixedArray> p_v);
  TNode<Foreign> LoadSyntheticModuleEvaluationSteps(TNode<SyntheticModule> p_o);
  void StoreSyntheticModuleEvaluationSteps(TNode<SyntheticModule> p_o, TNode<Foreign> p_v);
  TNode<FixedArray> LoadTemplateObjectDescriptionRawStrings(TNode<TemplateObjectDescription> p_o);
  void StoreTemplateObjectDescriptionRawStrings(TNode<TemplateObjectDescription> p_o, TNode<FixedArray> p_v);
  TNode<FixedArray> LoadTemplateObjectDescriptionCookedStrings(TNode<TemplateObjectDescription> p_o);
  void StoreTemplateObjectDescriptionCookedStrings(TNode<TemplateObjectDescription> p_o, TNode<FixedArray> p_v);
  TNode<Object> LoadTemplateInfoTag(TNode<TemplateInfo> p_o);
  void StoreTemplateInfoTag(TNode<TemplateInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadTemplateInfoSerialNumber(TNode<TemplateInfo> p_o);
  void StoreTemplateInfoSerialNumber(TNode<TemplateInfo> p_o, TNode<Object> p_v);
  TNode<Smi> LoadTemplateInfoNumberOfProperties(TNode<TemplateInfo> p_o);
  void StoreTemplateInfoNumberOfProperties(TNode<TemplateInfo> p_o, TNode<Smi> p_v);
  TNode<Object> LoadTemplateInfoPropertyList(TNode<TemplateInfo> p_o);
  void StoreTemplateInfoPropertyList(TNode<TemplateInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadTemplateInfoPropertyAccessors(TNode<TemplateInfo> p_o);
  void StoreTemplateInfoPropertyAccessors(TNode<TemplateInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadFunctionTemplateRareDataPrototypeTemplate(TNode<FunctionTemplateRareData> p_o);
  void StoreFunctionTemplateRareDataPrototypeTemplate(TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v);
  TNode<Object> LoadFunctionTemplateRareDataPrototypeProviderTemplate(TNode<FunctionTemplateRareData> p_o);
  void StoreFunctionTemplateRareDataPrototypeProviderTemplate(TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v);
  TNode<Object> LoadFunctionTemplateRareDataParentTemplate(TNode<FunctionTemplateRareData> p_o);
  void StoreFunctionTemplateRareDataParentTemplate(TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v);
  TNode<Object> LoadFunctionTemplateRareDataNamedPropertyHandler(TNode<FunctionTemplateRareData> p_o);
  void StoreFunctionTemplateRareDataNamedPropertyHandler(TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v);
  TNode<Object> LoadFunctionTemplateRareDataIndexedPropertyHandler(TNode<FunctionTemplateRareData> p_o);
  void StoreFunctionTemplateRareDataIndexedPropertyHandler(TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v);
  TNode<Object> LoadFunctionTemplateRareDataInstanceTemplate(TNode<FunctionTemplateRareData> p_o);
  void StoreFunctionTemplateRareDataInstanceTemplate(TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v);
  TNode<Object> LoadFunctionTemplateRareDataInstanceCallHandler(TNode<FunctionTemplateRareData> p_o);
  void StoreFunctionTemplateRareDataInstanceCallHandler(TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v);
  TNode<Object> LoadFunctionTemplateRareDataAccessCheckInfo(TNode<FunctionTemplateRareData> p_o);
  void StoreFunctionTemplateRareDataAccessCheckInfo(TNode<FunctionTemplateRareData> p_o, TNode<Object> p_v);
  TNode<Object> LoadFunctionTemplateInfoCallCode(TNode<FunctionTemplateInfo> p_o);
  void StoreFunctionTemplateInfoCallCode(TNode<FunctionTemplateInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadFunctionTemplateInfoClassName(TNode<FunctionTemplateInfo> p_o);
  void StoreFunctionTemplateInfoClassName(TNode<FunctionTemplateInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadFunctionTemplateInfoSignature(TNode<FunctionTemplateInfo> p_o);
  void StoreFunctionTemplateInfoSignature(TNode<FunctionTemplateInfo> p_o, TNode<Object> p_v);
  TNode<HeapObject> LoadFunctionTemplateInfoRareData(TNode<FunctionTemplateInfo> p_o);
  void StoreFunctionTemplateInfoRareData(TNode<FunctionTemplateInfo> p_o, TNode<HeapObject> p_v);
  TNode<Object> LoadFunctionTemplateInfoSharedFunctionInfo(TNode<FunctionTemplateInfo> p_o);
  void StoreFunctionTemplateInfoSharedFunctionInfo(TNode<FunctionTemplateInfo> p_o, TNode<Object> p_v);
  TNode<Smi> LoadFunctionTemplateInfoFlag(TNode<FunctionTemplateInfo> p_o);
  void StoreFunctionTemplateInfoFlag(TNode<FunctionTemplateInfo> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadFunctionTemplateInfoLength(TNode<FunctionTemplateInfo> p_o);
  void StoreFunctionTemplateInfoLength(TNode<FunctionTemplateInfo> p_o, TNode<Smi> p_v);
  TNode<Object> LoadFunctionTemplateInfoCachedPropertyName(TNode<FunctionTemplateInfo> p_o);
  void StoreFunctionTemplateInfoCachedPropertyName(TNode<FunctionTemplateInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadObjectTemplateInfoConstructor(TNode<ObjectTemplateInfo> p_o);
  void StoreObjectTemplateInfoConstructor(TNode<ObjectTemplateInfo> p_o, TNode<Object> p_v);
  TNode<Object> LoadObjectTemplateInfoData(TNode<ObjectTemplateInfo> p_o);
  void StoreObjectTemplateInfoData(TNode<ObjectTemplateInfo> p_o, TNode<Object> p_v);
  TNode<Code> LoadWasmExportedFunctionDataWrapperCode(TNode<WasmExportedFunctionData> p_o);
  void StoreWasmExportedFunctionDataWrapperCode(TNode<WasmExportedFunctionData> p_o, TNode<Code> p_v);
  TNode<WasmInstanceObject> LoadWasmExportedFunctionDataInstance(TNode<WasmExportedFunctionData> p_o);
  void StoreWasmExportedFunctionDataInstance(TNode<WasmExportedFunctionData> p_o, TNode<WasmInstanceObject> p_v);
  TNode<Smi> LoadWasmExportedFunctionDataJumpTableOffset(TNode<WasmExportedFunctionData> p_o);
  void StoreWasmExportedFunctionDataJumpTableOffset(TNode<WasmExportedFunctionData> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadWasmExportedFunctionDataFunctionIndex(TNode<WasmExportedFunctionData> p_o);
  void StoreWasmExportedFunctionDataFunctionIndex(TNode<WasmExportedFunctionData> p_o, TNode<Smi> p_v);
  TNode<Object> LoadWasmExportedFunctionDataCWrapperCode(TNode<WasmExportedFunctionData> p_o);
  void StoreWasmExportedFunctionDataCWrapperCode(TNode<WasmExportedFunctionData> p_o, TNode<Object> p_v);
  TNode<Object> LoadWasmExportedFunctionDataWasmCallTarget(TNode<WasmExportedFunctionData> p_o);
  void StoreWasmExportedFunctionDataWasmCallTarget(TNode<WasmExportedFunctionData> p_o, TNode<Object> p_v);
  TNode<Smi> LoadWasmExportedFunctionDataPackedArgsSize(TNode<WasmExportedFunctionData> p_o);
  void StoreWasmExportedFunctionDataPackedArgsSize(TNode<WasmExportedFunctionData> p_o, TNode<Smi> p_v);
  TNode<JSReceiver> LoadWasmJSFunctionDataCallable(TNode<WasmJSFunctionData> p_o);
  void StoreWasmJSFunctionDataCallable(TNode<WasmJSFunctionData> p_o, TNode<JSReceiver> p_v);
  TNode<Code> LoadWasmJSFunctionDataWrapperCode(TNode<WasmJSFunctionData> p_o);
  void StoreWasmJSFunctionDataWrapperCode(TNode<WasmJSFunctionData> p_o, TNode<Code> p_v);
  TNode<Smi> LoadWasmJSFunctionDataSerializedReturnCount(TNode<WasmJSFunctionData> p_o);
  void StoreWasmJSFunctionDataSerializedReturnCount(TNode<WasmJSFunctionData> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadWasmJSFunctionDataSerializedParameterCount(TNode<WasmJSFunctionData> p_o);
  void StoreWasmJSFunctionDataSerializedParameterCount(TNode<WasmJSFunctionData> p_o, TNode<Smi> p_v);
  TNode<ByteArray> LoadWasmJSFunctionDataSerializedSignature(TNode<WasmJSFunctionData> p_o);
  void StoreWasmJSFunctionDataSerializedSignature(TNode<WasmJSFunctionData> p_o, TNode<ByteArray> p_v);
  TNode<RawPtrT> LoadWasmCapiFunctionDataCallTarget(TNode<WasmCapiFunctionData> p_o);
  void StoreWasmCapiFunctionDataCallTarget(TNode<WasmCapiFunctionData> p_o, TNode<RawPtrT> p_v);
  TNode<Foreign> LoadWasmCapiFunctionDataEmbedderData(TNode<WasmCapiFunctionData> p_o);
  void StoreWasmCapiFunctionDataEmbedderData(TNode<WasmCapiFunctionData> p_o, TNode<Foreign> p_v);
  TNode<Code> LoadWasmCapiFunctionDataWrapperCode(TNode<WasmCapiFunctionData> p_o);
  void StoreWasmCapiFunctionDataWrapperCode(TNode<WasmCapiFunctionData> p_o, TNode<Code> p_v);
  TNode<ByteArray> LoadWasmCapiFunctionDataSerializedSignature(TNode<WasmCapiFunctionData> p_o);
  void StoreWasmCapiFunctionDataSerializedSignature(TNode<WasmCapiFunctionData> p_o, TNode<ByteArray> p_v);
  TNode<Uint32T> LoadWasmIndirectFunctionTableSize(TNode<WasmIndirectFunctionTable> p_o);
  void StoreWasmIndirectFunctionTableSize(TNode<WasmIndirectFunctionTable> p_o, TNode<Uint32T> p_v);
  TNode<RawPtrT> LoadWasmIndirectFunctionTableSigIds(TNode<WasmIndirectFunctionTable> p_o);
  void StoreWasmIndirectFunctionTableSigIds(TNode<WasmIndirectFunctionTable> p_o, TNode<RawPtrT> p_v);
  TNode<RawPtrT> LoadWasmIndirectFunctionTableTargets(TNode<WasmIndirectFunctionTable> p_o);
  void StoreWasmIndirectFunctionTableTargets(TNode<WasmIndirectFunctionTable> p_o, TNode<RawPtrT> p_v);
  TNode<HeapObject> LoadWasmIndirectFunctionTableManagedNativeAllocations(TNode<WasmIndirectFunctionTable> p_o);
  void StoreWasmIndirectFunctionTableManagedNativeAllocations(TNode<WasmIndirectFunctionTable> p_o, TNode<HeapObject> p_v);
  TNode<FixedArray> LoadWasmIndirectFunctionTableRefs(TNode<WasmIndirectFunctionTable> p_o);
  void StoreWasmIndirectFunctionTableRefs(TNode<WasmIndirectFunctionTable> p_o, TNode<FixedArray> p_v);
  TNode<WasmInstanceObject> LoadWasmDebugInfoInstance(TNode<WasmDebugInfo> p_o);
  void StoreWasmDebugInfoInstance(TNode<WasmDebugInfo> p_o, TNode<WasmInstanceObject> p_v);
  TNode<HeapObject> LoadWasmDebugInfoInterpreterHandle(TNode<WasmDebugInfo> p_o);
  void StoreWasmDebugInfoInterpreterHandle(TNode<WasmDebugInfo> p_o, TNode<HeapObject> p_v);
  TNode<Cell> LoadWasmDebugInfoInterpreterReferenceStack(TNode<WasmDebugInfo> p_o);
  void StoreWasmDebugInfoInterpreterReferenceStack(TNode<WasmDebugInfo> p_o, TNode<Cell> p_v);
  TNode<HeapObject> LoadWasmDebugInfoLocalsNames(TNode<WasmDebugInfo> p_o);
  void StoreWasmDebugInfoLocalsNames(TNode<WasmDebugInfo> p_o, TNode<HeapObject> p_v);
  TNode<HeapObject> LoadWasmDebugInfoCWasmEntries(TNode<WasmDebugInfo> p_o);
  void StoreWasmDebugInfoCWasmEntries(TNode<WasmDebugInfo> p_o, TNode<HeapObject> p_v);
  TNode<HeapObject> LoadWasmDebugInfoCWasmEntryMap(TNode<WasmDebugInfo> p_o);
  void StoreWasmDebugInfoCWasmEntryMap(TNode<WasmDebugInfo> p_o, TNode<HeapObject> p_v);
  TNode<Smi> LoadWasmExceptionTagIndex(TNode<WasmExceptionTag> p_o);
  void StoreWasmExceptionTagIndex(TNode<WasmExceptionTag> p_o, TNode<Smi> p_v);
  TNode<Foreign> LoadWasmModuleObjectNativeModule(TNode<WasmModuleObject> p_o);
  void StoreWasmModuleObjectNativeModule(TNode<WasmModuleObject> p_o, TNode<Foreign> p_v);
  TNode<FixedArray> LoadWasmModuleObjectExportWrappers(TNode<WasmModuleObject> p_o);
  void StoreWasmModuleObjectExportWrappers(TNode<WasmModuleObject> p_o, TNode<FixedArray> p_v);
  TNode<Script> LoadWasmModuleObjectScript(TNode<WasmModuleObject> p_o);
  void StoreWasmModuleObjectScript(TNode<WasmModuleObject> p_o, TNode<Script> p_v);
  TNode<HeapObject> LoadWasmModuleObjectAsmJsOffsetTable(TNode<WasmModuleObject> p_o);
  void StoreWasmModuleObjectAsmJsOffsetTable(TNode<WasmModuleObject> p_o, TNode<HeapObject> p_v);
  TNode<FixedArray> LoadWasmTableObjectEntries(TNode<WasmTableObject> p_o);
  void StoreWasmTableObjectEntries(TNode<WasmTableObject> p_o, TNode<FixedArray> p_v);
  TNode<Smi> LoadWasmTableObjectCurrentLength(TNode<WasmTableObject> p_o);
  void StoreWasmTableObjectCurrentLength(TNode<WasmTableObject> p_o, TNode<Smi> p_v);
  TNode<Object> LoadWasmTableObjectMaximumLength(TNode<WasmTableObject> p_o);
  void StoreWasmTableObjectMaximumLength(TNode<WasmTableObject> p_o, TNode<Object> p_v);
  TNode<FixedArray> LoadWasmTableObjectDispatchTables(TNode<WasmTableObject> p_o);
  void StoreWasmTableObjectDispatchTables(TNode<WasmTableObject> p_o, TNode<FixedArray> p_v);
  TNode<Smi> LoadWasmTableObjectRawType(TNode<WasmTableObject> p_o);
  void StoreWasmTableObjectRawType(TNode<WasmTableObject> p_o, TNode<Smi> p_v);
  TNode<JSArrayBuffer> LoadWasmMemoryObjectArrayBuffer(TNode<WasmMemoryObject> p_o);
  void StoreWasmMemoryObjectArrayBuffer(TNode<WasmMemoryObject> p_o, TNode<JSArrayBuffer> p_v);
  TNode<Smi> LoadWasmMemoryObjectMaximumPages(TNode<WasmMemoryObject> p_o);
  void StoreWasmMemoryObjectMaximumPages(TNode<WasmMemoryObject> p_o, TNode<Smi> p_v);
  TNode<HeapObject> LoadWasmMemoryObjectInstances(TNode<WasmMemoryObject> p_o);
  void StoreWasmMemoryObjectInstances(TNode<WasmMemoryObject> p_o, TNode<HeapObject> p_v);
  TNode<HeapObject> LoadWasmGlobalObjectUntaggedBuffer(TNode<WasmGlobalObject> p_o);
  void StoreWasmGlobalObjectUntaggedBuffer(TNode<WasmGlobalObject> p_o, TNode<HeapObject> p_v);
  TNode<HeapObject> LoadWasmGlobalObjectTaggedBuffer(TNode<WasmGlobalObject> p_o);
  void StoreWasmGlobalObjectTaggedBuffer(TNode<WasmGlobalObject> p_o, TNode<HeapObject> p_v);
  TNode<Smi> LoadWasmGlobalObjectOffset(TNode<WasmGlobalObject> p_o);
  void StoreWasmGlobalObjectOffset(TNode<WasmGlobalObject> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadWasmGlobalObjectFlags(TNode<WasmGlobalObject> p_o);
  void StoreWasmGlobalObjectFlags(TNode<WasmGlobalObject> p_o, TNode<Smi> p_v);
  TNode<ByteArray> LoadWasmExceptionObjectSerializedSignature(TNode<WasmExceptionObject> p_o);
  void StoreWasmExceptionObjectSerializedSignature(TNode<WasmExceptionObject> p_o, TNode<ByteArray> p_v);
  TNode<HeapObject> LoadWasmExceptionObjectExceptionTag(TNode<WasmExceptionObject> p_o);
  void StoreWasmExceptionObjectExceptionTag(TNode<WasmExceptionObject> p_o, TNode<HeapObject> p_v);
  TNode<Foreign> LoadAsmWasmDataManagedNativeModule(TNode<AsmWasmData> p_o);
  void StoreAsmWasmDataManagedNativeModule(TNode<AsmWasmData> p_o, TNode<Foreign> p_v);
  TNode<FixedArray> LoadAsmWasmDataExportWrappers(TNode<AsmWasmData> p_o);
  void StoreAsmWasmDataExportWrappers(TNode<AsmWasmData> p_o, TNode<FixedArray> p_v);
  TNode<ByteArray> LoadAsmWasmDataAsmJsOffsetTable(TNode<AsmWasmData> p_o);
  void StoreAsmWasmDataAsmJsOffsetTable(TNode<AsmWasmData> p_o, TNode<ByteArray> p_v);
  TNode<HeapNumber> LoadAsmWasmDataUsesBitset(TNode<AsmWasmData> p_o);
  void StoreAsmWasmDataUsesBitset(TNode<AsmWasmData> p_o, TNode<HeapNumber> p_v);
  TNode<Smi> LoadInternalClassA(TNode<InternalClass> p_o);
  void StoreInternalClassA(TNode<InternalClass> p_o, TNode<Smi> p_v);
  TNode<Number> LoadInternalClassB(TNode<InternalClass> p_o);
  void StoreInternalClassB(TNode<InternalClass> p_o, TNode<Number> p_v);
  TNode<Smi> LoadSmiPairA(TNode<SmiPair> p_o);
  void StoreSmiPairA(TNode<SmiPair> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadSmiPairB(TNode<SmiPair> p_o);
  void StoreSmiPairB(TNode<SmiPair> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadSmiBoxValue(TNode<SmiBox> p_o);
  void StoreSmiBoxValue(TNode<SmiBox> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadSmiBoxUnrelated(TNode<SmiBox> p_o);
  void StoreSmiBoxUnrelated(TNode<SmiBox> p_o, TNode<Smi> p_v);
  TNode<JSReceiver> LoadSortStateReceiver(TNode<SortState> p_o);
  void StoreSortStateReceiver(TNode<SortState> p_o, TNode<JSReceiver> p_v);
  TNode<Map> LoadSortStateInitialReceiverMap(TNode<SortState> p_o);
  void StoreSortStateInitialReceiverMap(TNode<SortState> p_o, TNode<Map> p_v);
  TNode<Number> LoadSortStateInitialReceiverLength(TNode<SortState> p_o);
  void StoreSortStateInitialReceiverLength(TNode<SortState> p_o, TNode<Number> p_v);
  TNode<HeapObject> LoadSortStateUserCmpFn(TNode<SortState> p_o);
  void StoreSortStateUserCmpFn(TNode<SortState> p_o, TNode<HeapObject> p_v);
  TNode<BuiltinPtr> LoadSortStateSortComparePtr(TNode<SortState> p_o);
  void StoreSortStateSortComparePtr(TNode<SortState> p_o, TNode<BuiltinPtr> p_v);
  TNode<BuiltinPtr> LoadSortStateLoadFn(TNode<SortState> p_o);
  void StoreSortStateLoadFn(TNode<SortState> p_o, TNode<BuiltinPtr> p_v);
  TNode<BuiltinPtr> LoadSortStateStoreFn(TNode<SortState> p_o);
  void StoreSortStateStoreFn(TNode<SortState> p_o, TNode<BuiltinPtr> p_v);
  TNode<BuiltinPtr> LoadSortStateDeleteFn(TNode<SortState> p_o);
  void StoreSortStateDeleteFn(TNode<SortState> p_o, TNode<BuiltinPtr> p_v);
  TNode<BuiltinPtr> LoadSortStateCanUseSameAccessorFn(TNode<SortState> p_o);
  void StoreSortStateCanUseSameAccessorFn(TNode<SortState> p_o, TNode<BuiltinPtr> p_v);
  TNode<Smi> LoadSortStateMinGallop(TNode<SortState> p_o);
  void StoreSortStateMinGallop(TNode<SortState> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadSortStatePendingRunsSize(TNode<SortState> p_o);
  void StoreSortStatePendingRunsSize(TNode<SortState> p_o, TNode<Smi> p_v);
  TNode<FixedArray> LoadSortStatePendingRuns(TNode<SortState> p_o);
  void StoreSortStatePendingRuns(TNode<SortState> p_o, TNode<FixedArray> p_v);
  TNode<FixedArray> LoadSortStateWorkArray(TNode<SortState> p_o);
  void StoreSortStateWorkArray(TNode<SortState> p_o, TNode<FixedArray> p_v);
  TNode<FixedArray> LoadSortStateTempArray(TNode<SortState> p_o);
  void StoreSortStateTempArray(TNode<SortState> p_o, TNode<FixedArray> p_v);
  TNode<Smi> LoadSortStateSortLength(TNode<SortState> p_o);
  void StoreSortStateSortLength(TNode<SortState> p_o, TNode<Smi> p_v);
  TNode<Smi> LoadSortStateNumberOfUndefined(TNode<SortState> p_o);
  void StoreSortStateNumberOfUndefined(TNode<SortState> p_o, TNode<Smi> p_v);
 private:
  compiler::CodeAssemblerState* state_;
};
}  // namespace internal
}  // namespace v8
#endif  // V8_GEN_TORQUE_GENERATED_EXPORTED_MACROS_ASSEMBLER_TQ_H_
